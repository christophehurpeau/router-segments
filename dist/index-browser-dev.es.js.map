{"version":3,"file":"index-browser-dev.es.js","sources":["../src/routes/createRoutePath.ts","../src/routes/NotLocalizedEndRoute.ts","../src/routes/LocalizedEndRoute.ts","../src/routes/NotLocalizedSegmentRoute.ts","../src/routes/LocalizedSegmentRoute.ts","../src/routes/create.ts","../src/router/findMatch.ts","../src/router/createRouter.ts","../src/builder/createSegmentRouterBuilderCreator.ts","../src/builder/createRouterBuilder.ts"],"sourcesContent":["import pathToRegExp, { Key } from 'path-to-regexp';\nimport { SegmentRoutePath, EndRoutePath } from '../types';\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: true,\n): SegmentRoutePath;\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: false,\n): EndRoutePath;\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePath | EndRoutePath {\n  const keys: Key[] = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map((key) => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n}\n\nexport const createRoutePathSegment = (\n  path: string,\n  completePath: string,\n): SegmentRoutePath => internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (\n  path: string,\n  completePath: string,\n): EndRoutePath => internalCreateRoutePath(path, completePath, false);\n","import { EndRoutePath, RouteRef } from './types';\nimport { EndRoute, NotLocalizedRoute } from './interfaces';\n\nexport default class NotLocalizedEndRoute\n  implements EndRoute, NotLocalizedRoute<EndRoutePath> {\n  path: EndRoutePath;\n\n  ref: RouteRef;\n\n  constructor(path: EndRoutePath, ref: RouteRef) {\n    this.path = path;\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): EndRoutePath {\n    return this.path;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import { LocaleType, EndRoutePath, RouteRef } from './types';\nimport { EndRoute, LocalizedRoute } from './interfaces';\n\nexport default class LocalizedEndRoute<Locales extends LocaleType>\n  implements EndRoute, LocalizedRoute<EndRoutePath, Locales> {\n  localizedPaths: Map<LocaleType, EndRoutePath>;\n\n  ref: RouteRef;\n\n  constructor(localizedPaths: Map<LocaleType, EndRoutePath>, ref: RouteRef) {\n    this.localizedPaths = localizedPaths;\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale: Locales): EndRoutePath {\n    return this.localizedPaths.get(locale) as EndRoutePath;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON() {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import NotLocalizedEndRoute from './NotLocalizedEndRoute';\nimport { SegmentRoute, NotLocalizedRoute } from './interfaces';\nimport { SegmentRoutePath } from './types';\n\nexport default class NotLocalizedSegmentRoute\n  implements SegmentRoute, NotLocalizedRoute<SegmentRoutePath> {\n  path: SegmentRoutePath;\n\n  nestedRoutes: NotLocalizedRoute<any>[] = [];\n\n  defaultRoute: undefined | NotLocalizedEndRoute;\n\n  constructor(path: SegmentRoutePath) {\n    this.path = path;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePath {\n    return this.path;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import LocalizedEndRoute from './LocalizedEndRoute';\nimport { LocaleType, SegmentRoutePath } from './types';\nimport { SegmentRoute, LocalizedRoute } from './interfaces';\n\nexport default class LocalizedSegmentRoute<Locales extends LocaleType>\n  implements SegmentRoute, LocalizedRoute<SegmentRoutePath, Locales> {\n  localizedPaths: Map<Locales, SegmentRoutePath>;\n\n  nestedRoutes: LocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: undefined | LocalizedEndRoute<Locales>;\n\n  constructor(localizedPaths: Map<Locales, SegmentRoutePath>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale: Locales): SegmentRoutePath {\n    return this.localizedPaths.get(locale) as SegmentRoutePath;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON() {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import { PRODUCTION } from 'pob-babel';\nimport {\n  LocaleType,\n  LocalizedPathsRecord,\n  EndRoutePath,\n  SegmentRoutePath,\n  RouteRef,\n} from '../types';\nimport { createRoutePath, createRoutePathSegment } from './createRoutePath';\nimport Route from './NotLocalizedEndRoute';\nimport LocalizedEndRoute from './LocalizedEndRoute';\nimport NotLocalizedSegmentRoute from './NotLocalizedSegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nconst createLocalizedPaths = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  segment: boolean,\n) => {\n  const localizedPaths = new Map();\n  // @ts-ignore https://github.com/Microsoft/TypeScript/pull/28899\n  Object.keys(localizedPathsRecord).forEach((locale: Locales) => {\n    const path = localizedPathsRecord[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePath = createRoutePathSegment(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    } else {\n      const routerPath: EndRoutePath = createRoutePath(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: RouteRef) => {\n  if (!ref) throw new Error(`Invalid ref: \"${ref}\"`);\n};\n\nexport const createRoute = (\n  path: string,\n  completePath: string,\n  ref: RouteRef,\n): Route => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: EndRoutePath = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  ref: RouteRef,\n): LocalizedEndRoute<Locales> => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    false,\n  );\n  return new LocalizedEndRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (\n  path: string,\n  completePath: string,\n): NotLocalizedSegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new NotLocalizedSegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n): LocalizedSegmentRoute<Locales> => {\n  const localizedPaths = createLocalizedPaths(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    true,\n  );\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import { PRODUCTION } from 'pob-babel';\nimport Logger from 'nightingale-logger';\nimport {\n  Routes,\n  LocaleType,\n  RoutePathInterface,\n  RouteRef,\n  SegmentRoutePath,\n  EndRoutePath,\n} from '../types';\nimport { EndRoute, Route, SegmentRoute } from '../routes/interfaces';\n\nexport interface RouteMatch<Locales extends LocaleType | never> {\n  namedParams: undefined | Map<string, string>;\n  otherParams: undefined | string[];\n  path: string;\n  ref: RouteRef;\n  route: Route<any, Locales>;\n  routePath: SegmentRoutePath | EndRoutePath;\n}\n\nconst logger = !PRODUCTION\n  ? new Logger('router-segments:findMatch')\n  : undefined;\n\nconst parseOtherParams = (wildcard: string) =>\n  wildcard ? wildcard.split('/') : [];\n\nconst findMatch = <Locales extends LocaleType>(\n  path: string,\n  completePath: string,\n  routes: Routes<Locales>,\n  locale: Locales = 'en' as Locales,\n  namedParams?: Map<string | number, string>,\n): null | RouteMatch<Locales> => {\n  let result = null;\n\n  routes.some((route) => {\n    const routePath: RoutePathInterface = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION) {\n      // @ts-ignore\n      logger.debug(`trying ${routePath.regExp}`);\n    }\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length !== 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string | number) => {\n        (namedParams as Map<string | number, string>).set(\n          paramName,\n          match[group++],\n        );\n      });\n    }\n\n    if (route.isSegment()) {\n      const segment = route as SegmentRoute;\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = findMatch(\n          `/${restOfThePath}`,\n          completePath,\n          segment.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!segment.defaultRoute) {\n        return false;\n      }\n\n      route = segment.defaultRoute;\n    }\n\n    const endRoute = route as EndRoute;\n\n    const otherParams =\n      group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      ref: endRoute.ref,\n      path: completePath,\n      route: endRoute,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default <Locales extends LocaleType>(\n  path: string,\n  routes: Routes<Locales>,\n  locale?: Locales,\n): null | RouteMatch<Locales> => findMatch(path, path, routes, locale);\n","import { Routes, RouteMap, LocaleType } from '../types';\nimport { EndRoute } from '../routes/interfaces';\nimport findMatch, { RouteMatch } from './findMatch';\n\nexport interface Router<Locales extends LocaleType | never> {\n  get(key: string): EndRoute;\n  find(path: string, locale?: Locales): null | RouteMatch<Locales>;\n  toLocalizedPath(locale: Locales, key: string, args?: any): string;\n  toPath(key: string, args?: any): string;\n}\n\nexport default <Locales extends LocaleType | never>(\n  routes: Routes<Locales>,\n  routeMap: RouteMap<Locales>,\n): Router<Locales> => {\n  const getRequiredRoute = (routeKey: string): EndRoute => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: getRequiredRoute,\n    find: (path: string, locale?: Locales): null | RouteMatch<Locales> =>\n      findMatch(path, routes, locale),\n    toPath: (key: string, args?: any): string =>\n      getRequiredRoute(key)\n        .getPath()\n        .toPath(args),\n    toLocalizedPath: (locale: Locales, key: string, args?: any): string =>\n      getRequiredRoute(key)\n        .getPath(locale)\n        .toPath(args),\n  };\n};\n","import { LocalizedPathsRecord, RouteRef, LocaleType } from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport { LocalizedSegmentRoute } from '../routes';\nimport { EndRoute, SegmentRoute } from '../routes/interfaces';\n\nexport interface SegmentRouterBuilder<Locales extends LocaleType> {\n  add(path: string, ref: RouteRef, key?: string): void;\n  addLocalized(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ): void;\n  addLocalizedSegment(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  addSegment(\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  defaultRoute(ref: RouteRef, key?: string): void;\n}\n\nexport default <Locales extends LocaleType>(\n  defaultLocale: undefined | Locales,\n  addToRouteMap: (key: string, route: EndRoute<Locales>) => void,\n) => {\n  const createSegmentRouterBuilder = (\n    segmentRoute: SegmentRoute<Locales>,\n  ): SegmentRouterBuilder<Locales> => {\n    const getCompletePath = (path: string, locale?: Locales) =>\n      `${segmentRoute.getPath(locale).completePath}${path}`;\n\n    const getCompleteLocalizedPaths = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n    ): LocalizedPathsRecord<Locales> => {\n      const completeLocalizedPaths: { [locale: string]: string } = {};\n\n      // @ts-ignore https://github.com/Microsoft/TypeScript/pull/28899\n      Object.keys(localizedPaths).forEach((locale: Locales) => {\n        completeLocalizedPaths[locale] = getCompletePath(\n          localizedPaths[locale],\n          locale,\n        );\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (\n      segmentRoute: LocalizedSegmentRoute<Locales>,\n      path: string,\n    ): Record<Locales, string> => {\n      const localizedPaths: { [locale: string]: string } = {};\n      [...segmentRoute.localizedPaths.keys()].forEach((locale) => {\n        localizedPaths[locale] = path;\n      });\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string =\n        key || completeLocalizedPaths[defaultLocale as Locales];\n      const route = createLocalizedRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n        ref,\n      );\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (path: string, ref: RouteRef, key?: string) => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedEndRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          ref,\n          key,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n      );\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ) => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedSegmentRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          buildSegment,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRef, key?: string) => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRef, key?: string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        ref: RouteRef,\n        key?: string,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedEndRoute(localizedPaths, ref, key),\n        );\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedSegmentRoute(localizedPaths, buildSegment),\n        );\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n};\n","import {\n  LocaleType,\n  LocalizedPathsRecord,\n  Routes,\n  RouteMap,\n  RouteRef,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter, { Router } from '../router/createRouter';\nimport { EndRoute } from '../routes/interfaces';\nimport createSegmentRouterBuilderCreator, {\n  SegmentRouterBuilder,\n} from './createSegmentRouterBuilderCreator';\n\nexport interface RouterBuilder<Locales extends LocaleType | never> {\n  add(path: string, ref: RouteRef, key?: string): void;\n  addLocalized(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ): void;\n  addLocalizedSegment(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  addSegment(\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  createRouter(): Router<Locales>;\n  getRoutes(): Routes<Locales>;\n}\n\nexport default <Locales extends LocaleType>(\n  locales?: Locales[],\n): RouterBuilder<Locales> => {\n  const defaultLocale = locales && locales[0];\n  const routes: Routes<Locales> = [];\n  const routeMap: RouteMap<Locales> = new Map();\n\n  const addToRouteMap = (key: string, route: EndRoute<Locales>) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRef, key?: string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n};\n"],"names":["internalCreateRoutePath","path","completePath","segment","keys","regExp","pathToRegExp","sensitive","strict","namedParams","map","key","name","filter","Boolean","toPath","compile","createRoutePathSegment","createRoutePath","NotLocalizedEndRoute","ref","getPath","isSegment","isLocalized","toJSON","toString","JSON","stringify","LocalizedEndRoute","localizedPaths","Object","freeze","locale","get","entries","NotLocalizedSegmentRoute","nestedRoutes","LocalizedSegmentRoute","createLocalizedPaths","localizedPathsRecord","completeLocalizedPathsRecord","Map","forEach","routerPath","set","checkRef","Error","createRoute","routePath","Route","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","logger","Logger","parseOtherParams","wildcard","split","findMatch","routes","result","some","route","debug","match","exec","shift","groupCount","length","group","paramName","restOfThePath","defaultRoute","endRoute","otherParams","undefined","routeMap","getRequiredRoute","routeKey","find","args","toLocalizedPath","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","add","push","addLocalized","addSegment","addLocalizedSegment","locales","has","createSegmentRouterBuilderCreator","getRoutes","createRouter"],"mappings":"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"}