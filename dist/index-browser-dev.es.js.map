{"version":3,"file":"index-browser-dev.es.js","sources":["../src/routes/types.js","../src/routes/EndRoute.js","../src/routes/LocalizedEndRoute.js","../src/routes/SegmentRoute.js","../src/routes/LocalizedSegmentRoute.js","../src/routes/index.js","../src/types.js","../src/routes/createRoutePath.js","../src/routes/create.js","../src/router/findMatch.js","../src/router/createRouter.js","../src/builder/createSegmentRouterBuilderCreator.js","../src/builder/createRouterBuilder.js"],"sourcesContent":["export type RouteRefType = any;\n\nexport type RoutePathType = {|\n  path: string,\n  completePath: string,\n  regExp: RegExp,\n  namedParams: Array<string>,\n  toPath: (args: Object) => string,\n|};\n\nexport type SegmentRoutePathType = {|\n  path: string,\n  completePath: string,\n  regExp: RegExp,\n  namedParams: Array<string>,\n|};\n\nexport type LocaleType = string;\n","import type { RoutePathType, RouteRefType } from './types';\n\nexport default class EndRoute {\n  path: RoutePathType;\n  ref: RouteRefType;\n\n  constructor(path: RoutePathType, ref: RouteRefType) {\n    this.path = path;\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): RoutePathType {\n    return this.path;\n  }\n\n  isSegment(): boolean {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocaleType, RoutePathType, RouteRefType } from './types';\n\nexport default class LocalizedEndRoute {\n  localizedPaths: Map<LocaleType, RoutePathType>;\n  ref: RouteRefType;\n\n  constructor(localizedPaths: Map<LocaleType, RoutePathType>, ref: RouteRefType) {\n    this.localizedPaths = localizedPaths;\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale: LocaleType): ?RoutePathType {\n    return this.localizedPaths.get(locale);\n  }\n\n  isSegment(): boolean {\n    return false;\n  }\n\n  toJSON() {\n    return Array.from(this.localizedPaths.entries());\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { SegmentRoutePathType } from './types';\nimport type Route from './EndRoute';\n\nexport default class SegmentRoute {\n  path: SegmentRoutePathType;\n  // nestedRoutes: Array<Route | SegmentRoute> = []; // disable flow: can cause issues with Object.freeze\n  nestedRoutes = [];\n  defaultRoute: ?Route;\n\n  constructor(path: SegmentRoutePathType) {\n    this.path = path;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePathType {\n    return this.path;\n  }\n\n  isSegment(): boolean {\n    return true;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocaleType, SegmentRoutePathType } from './types';\nimport type LocalizedRoute from './LocalizedEndRoute';\n\nexport default class LocalizedSegmentRoute {\n  localizedPaths: Map<LocaleType, SegmentRoutePathType>;\n  nestedRoutes: Array<LocalizedRoute | LocalizedSegmentRoute> = [];\n  defaultRoute: ?LocalizedRoute;\n\n  constructor(localizedPaths: Map<LocaleType, SegmentRoutePathType>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale: LocaleType): ?SegmentRoutePathType {\n    return this.localizedPaths.get(locale);\n  }\n\n  isSegment(): boolean {\n    return true;\n  }\n\n  toJSON() {\n    return Array.from(this.localizedPaths.entries());\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import EndRoute from './EndRoute';\nimport LocalizedEndRoute from './LocalizedEndRoute';\nimport SegmentRoute from './SegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nexport type RouteType = EndRoute | LocalizedEndRoute | SegmentRoute | LocalizedSegmentRoute;\nexport type SegmentRouteType = SegmentRoute | LocalizedSegmentRoute;\nexport type EndRouteType = EndRoute | LocalizedEndRoute;\n\nexport { EndRoute, LocalizedEndRoute, SegmentRoute, LocalizedSegmentRoute };\n","import type { RouteType, EndRouteType } from './routes';\nimport type { RouteRefType, RoutePathType, SegmentRoutePathType, LocaleType } from './routes/types';\n\nexport type { RouteType, RouteRefType, RoutePathType, SegmentRoutePathType, LocaleType };\n\nexport type PathDictionaryType = { [LocaleType]: string };\n\nexport type SegmentRouterBuilderType = {|\n  defaultRoute: (ref: RouteRefType, key?: ?string) => void,\n  add: (path: string, ref: RouteRefType, key?: ?string) => void,\n  addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key?: ?string) => void,\n  addSegment: (path: string, buildSegment: (builder: SegmentRouterBuilderType) => void) => void,\n  addLocalizedSegment: (\n    localizedPaths: PathDictionaryType,\n    buildSegment: (builder: SegmentRouterBuilderType) => void,\n  ) => void,\n|};\n\n// export type SegmentCallbackType = (builder: SegmentRouterBuilderType) => void;\n\nexport type RoutesType = Array<RouteType>;\nexport type RouteMapType = Map<string, RouteType>;\n\nexport type RouteMatchType = {|\n  ref: RouteRefType,\n  path: string,\n  route: RouteType,\n  routePath: SegmentRoutePathType | RoutePathType,\n  namedParams: ?Map<string, string>,\n  otherParams: ?Array<string>,\n|};\n\nexport type RouterType = {|\n  get: (key: string) => ?EndRouteType,\n  find: (path: string, locale?: ?string) => ?RouteMatchType,\n  toPath: (key: string, args: any) => string,\n  toLocalizedPath: (locale: string, key: string, args: any) => string,\n|};\n\nexport type RouterBuilderType = {|\n  add: (path: string, ref: RouteRefType, key?: ?string) => void,\n  addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key?: ?string) => void,\n  addSegment: (path: string, buildSegment: (builder: SegmentRouterBuilderType) => void) => void,\n  addLocalizedSegment: (\n    localizedPaths: PathDictionaryType,\n    buildSegment: (builder: SegmentRouterBuilderType) => void,\n  ) => void,\n  getRoutes: () => RoutesType,\n  createRouter: () => RouterType,\n|};\n","import pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePathType, RoutePathType } from '../types';\n\nconst internalCreateRoutePath = (\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePathType | RoutePathType => {\n  const keys = [];\n  const regExp = pathToRegExp(segment ? `${path}(.*)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map(key => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n};\n\nexport const createRoutePathSegment = (path: string, completePath: string): SegmentRoutePathType =>\n  internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (path: string, completePath: string): RoutePathType =>\n  internalCreateRoutePath(path, completePath, false);\n","import { createRoutePath, createRoutePathSegment } from './createRoutePath';\nimport type {\n  LocaleType,\n  PathDictionaryType,\n  RoutePathType,\n  SegmentRoutePathType,\n  RouteRefType,\n} from '../types';\nimport Route from './EndRoute';\nimport LocalizedRoute from './LocalizedEndRoute';\nimport SegmentRoute from './SegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nconst createLocalizedPaths = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  segment: boolean,\n) => {\n  const localizedPaths = new Map();\n  Object.keys(pathDictionary).forEach((locale: LocaleType) => {\n    const path = pathDictionary[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePathType = createRoutePathSegment(\n        path,\n        completePathDictionary[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    } else {\n      const routerPath: RoutePathType = createRoutePath(path, completePathDictionary[locale]);\n      localizedPaths.set(locale, routerPath);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: any) => {\n  if (!ref) throw new Error(`Invalid ref: \"${ref}\"`);\n};\n\nexport const createRoute = (path: string, completePath: string, ref: RouteRefType): Route => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: RoutePathType = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  ref: RouteRefType,\n): LocalizedRoute => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, false);\n  return new LocalizedRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (path: string, completePath: string): SegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new SegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n): LocalizedSegmentRoute => {\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, true);\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import Logger from 'nightingale-logger';\nimport type {\n  RoutesType,\n  LocaleType,\n  RouteMatchType,\n  SegmentRoutePathType,\n  RoutePathType,\n} from '../types';\nimport type { RouteType } from '../routes/index';\n\nconst logger = !PRODUCTION && new Logger('router-segments:findMatch');\n\nconst parseOtherParams = (wildcard: string) => (wildcard ? wildcard.split('/') : []);\n\nconst findMatch = (\n  path: string,\n  completePath: string,\n  routes: RoutesType,\n  locale: LocaleType,\n  namedParams: ?Map<string, string>,\n): ?RouteMatchType => {\n  let result = null;\n\n  routes.some((route: RouteType) => {\n    const routePath: ?SegmentRoutePathType | RoutePathType = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION) logger.debug(`trying ${routePath.regExp}`);\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length !== 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string) => {\n        namedParams.set(paramName, match[group++]);\n      });\n    }\n\n    if (route.isSegment()) {\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = findMatch(\n          `/${restOfThePath}`,\n          completePath,\n          route.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!route.defaultRoute) {\n        return false;\n      }\n\n      route = route.defaultRoute;\n    }\n\n    const otherParams = group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      ref: route.ref,\n      path: completePath,\n      route,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default (path: string, routes: RoutesType, locale: LocaleType = 'en'): ?RouteMatchType =>\n  findMatch(path, path, routes, locale);\n","import type { RoutesType, RouteMapType, RouterType, RouteMatchType } from '../types';\nimport type { EndRouteType } from '../routes';\nimport findMatch from './findMatch';\n\nexport default (routes: RoutesType, routeMap: RouteMapType): RouterType => {\n  const getRequiredRoute = (routeKey: string) => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: (key: string): ?EndRouteType => getRequiredRoute(key),\n    find: (path: string, locale: ?string): ?RouteMatchType => findMatch(path, routes, locale),\n    toPath: (key: string, args: any): string =>\n      getRequiredRoute(key)\n        .getPath()\n        .toPath(args),\n    toLocalizedPath: (locale: string, key: string, args: any): string =>\n      getRequiredRoute(key)\n        .getPath(locale)\n        .toPath(args),\n  };\n};\n","import type { SegmentRouteType } from '../routes/index';\nimport type {\n  RouteType,\n  PathDictionaryType,\n  RouteRefType,\n  SegmentRouterBuilderType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\n\ntype AddToRouteMapType = (key: string, route: RouteType) => void;\nexport default (defaultLocale: ?string, addToRouteMap: AddToRouteMapType) => {\n  const createSegmentRouterBuilder = (segmentRoute: SegmentRouteType) => {\n    const getCompletePath = path => segmentRoute.path.completePath + path;\n    const getCompleteLocalizedPaths = (localizedPaths: PathDictionaryType): PathDictionaryType => {\n      const completeLocalizedPaths = {};\n\n      const getCompletePathForLocale = !segmentRoute.localizedPaths\n        ? (path, locale) => `${segmentRoute.path.completePath}${path}`\n        : (path, locale) => `${segmentRoute.localizedPaths.get(locale).completePath}${path}`;\n\n      Object.keys(localizedPaths).forEach((locale: string) => {\n        completeLocalizedPaths[locale] = getCompletePathForLocale(localizedPaths[locale], locale);\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (path: string) => {\n      const localizedPaths = {};\n      Array.from(segmentRoute.localizedPaths.keys()).forEach(\n        locale => (localizedPaths[locale] = path),\n      );\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: PathDictionaryType,\n      ref: RouteRefType,\n      key: ?string,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale];\n      const route = createLocalizedRoute(localizedPaths, completeLocalizedPaths, ref);\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (path: string, ref: RouteRefType, key: ?string) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedEndRoute(createLocalizedPathFromSegment(path), ref, key);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: PathDictionaryType,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(localizedPaths, completeLocalizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedSegmentRoute(createLocalizedPathFromSegment(path), buildSegment);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRefType, key: ?string) => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRefType, key: ?string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedEndRoute(localizedPaths, ref, key));\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: PathDictionaryType,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedSegmentRoute(localizedPaths, buildSegment));\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n};\n","import type {\n  LocaleType,\n  RouterBuilderType,\n  PathDictionaryType,\n  RoutesType,\n  RouteMapType,\n  RouteType,\n  SegmentRouterBuilderType,\n  RouteRefType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter from '../router/createRouter';\nimport createSegmentRouterBuilderCreator from './createSegmentRouterBuilderCreator';\n\nexport default (locales: ?Array<LocaleType>): RouterBuilderType => {\n  const defaultLocale = locales && locales[0];\n  const routes: RoutesType = [];\n  const routeMap: RouteMapType = new Map();\n\n  const addToRouteMap = (key: string, route: RouteType) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRefType, key: ?string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (path: string, buildSegment: (builder: SegmentRouterBuilderType) => void): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: PathDictionaryType,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n};\n"],"names":["EndRoute","path","ref","JSON","stringify","toJSON","LocalizedEndRoute","localizedPaths","freeze","locale","get","Array","from","entries","SegmentRoute","nestedRoutes","LocalizedSegmentRoute","internalCreateRoutePath","completePath","segment","keys","regExp","pathToRegExp","namedParams","map","key","name","filter","Boolean","compile","createRoutePathSegment","createRoutePath","createLocalizedPaths","pathDictionary","completePathDictionary","Map","forEach","set","routerPath","checkRef","Error","createRoute","Route","routePath","createLocalizedRoute","LocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","logger","Logger","parseOtherParams","wildcard","split","findMatch","routes","result","some","route","getPath","debug","match","exec","shift","groupCount","length","group","paramName","isSegment","restOfThePath","defaultRoute","otherParams","undefined","Object","routeMap","getRequiredRoute","routeKey","args","toPath","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","getCompletePathForLocale","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","push","locales","has","createSegmentRouterBuilderCreator","createRouter"],"mappings":"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"}