{"version":3,"file":"index-browser.cjs.js","sources":["../src/router/findMatch.ts","../src/router/createRouter.ts","../src/utils/getKeys.ts","../src/routes/LocalizedEndRoute.ts","../src/routes/LocalizedSegmentRoute.ts","../src/routes/NotLocalizedEndRoute.ts","../src/routes/NotLocalizedSegmentRoute.ts","../src/routes/createRoutePath.ts","../src/routes/create.ts","../src/builder/createSegmentRouterBuilderCreator.ts","../src/builder/createRouterBuilder.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { IS_DEV } from 'pob-babel';\nimport { Logger } from 'nightingale-logger';\nimport type { EndRoute, Route, SegmentRoute } from '../routes/interfaces';\nimport type {\n  LocaleType,\n  RoutePathInterface,\n  RouteRef,\n  SegmentRoutePath,\n  EndRoutePath,\n} from '../types';\n\nexport interface RouteMatch<Locales extends LocaleType | never = any> {\n  namedParams: Map<string, string> | undefined;\n  otherParams: string[] | undefined;\n  path: string;\n  ref: RouteRef;\n  route: Route<any, Locales>;\n  routePath: EndRoutePath | SegmentRoutePath;\n}\n\nconst logger = IS_DEV ? new Logger('router-segments:findMatch') : undefined;\n\nconst parseOtherParams = (wildcard: string): string[] =>\n  wildcard ? wildcard.split('/') : [];\n\nconst internalFindMatch = <Locales extends LocaleType>(\n  path: string,\n  completePath: string,\n  routes: Route<RoutePathInterface, Locales>[],\n  locale: Locales = 'en' as Locales,\n  namedParams?: Map<number | string, string>,\n): RouteMatch<Locales> | null => {\n  let result = null;\n\n  routes.some((route): boolean => {\n    const routePath: RoutePathInterface = route.getPath(locale);\n    const isDev = IS_DEV;\n\n    if (isDev && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (isDev && logger) {\n      logger.debug(`trying ${routePath.regExp.toString()}`);\n    }\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length > 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: number | string) => {\n        namedParams!.set(paramName, match[group++]);\n      });\n    }\n\n    if (route.isSegment()) {\n      const segment = route as SegmentRoute;\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = internalFindMatch(\n          `/${restOfThePath}`,\n          completePath,\n          segment.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!segment.defaultRoute) {\n        return false;\n      }\n\n      route = segment.defaultRoute;\n    }\n\n    const endRoute = route as EndRoute;\n\n    const otherParams =\n      group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ref: endRoute.ref,\n      path: completePath,\n      route: endRoute,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport function findMatch<Locales extends LocaleType>(\n  path: string,\n  routes: Route<RoutePathInterface, Locales>[],\n  locale?: Locales,\n): RouteMatch<Locales> | null {\n  return internalFindMatch(path, path, routes, locale);\n}\n","import type { EndRoute } from '../routes/interfaces';\nimport type { Routes, RouteMap, LocaleType } from '../types';\nimport type { RouteMatch } from './findMatch';\nimport { findMatch } from './findMatch';\n\nexport interface Router<Locales extends LocaleType | never = any> {\n  get: (key: string) => EndRoute<Locales>;\n  find: (path: string, locale?: Locales) => RouteMatch<Locales> | null;\n  toLocalizedPath: (locale: Locales, key: string, args?: any) => string;\n  toPath: (key: string, args?: any) => string;\n}\n\nexport function createRouter<Locales extends LocaleType | never>(\n  routes: Routes<Locales>,\n  routeMap: RouteMap<Locales>,\n): Router<Locales> {\n  const getRequiredRoute = (routeKey: string): EndRoute<Locales> => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: getRequiredRoute,\n    find: (path: string, locale?: Locales): RouteMatch<Locales> | null =>\n      findMatch(path, routes, locale),\n    toPath: (key: string, args?: Record<string, any>): string =>\n      getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (\n      locale: Locales,\n      key: string,\n      args?: Record<string, any>,\n    ): string => getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n}\n","export const getKeys = <T extends Record<string, unknown>>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import type { EndRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, EndRoutePath, RouteRef } from './types';\n\nexport class LocalizedEndRoute<Locales extends LocaleType>\n  implements EndRoute<Locales>, LocalizedRoute<EndRoutePath, Locales>\n{\n  localizedPaths: Map<LocaleType, EndRoutePath>;\n\n  ref: RouteRef;\n\n  constructor(localizedPaths: Map<LocaleType, EndRoutePath>, ref: RouteRef) {\n    this.localizedPaths = localizedPaths;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale?: Locales): EndRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale)!;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocalizedEndRoute } from './LocalizedEndRoute';\nimport type { SegmentRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, SegmentRoutePath } from './types';\n\nexport class LocalizedSegmentRoute<Locales extends LocaleType>\n  implements SegmentRoute<Locales>, LocalizedRoute<SegmentRoutePath, Locales>\n{\n  localizedPaths: Map<Locales, SegmentRoutePath>;\n\n  nestedRoutes: LocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: LocalizedEndRoute<Locales> | undefined;\n\n  constructor(localizedPaths: Map<Locales, SegmentRoutePath>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale?: Locales): SegmentRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale)!;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { EndRoute, NotLocalizedRoute } from './interfaces';\nimport type { EndRoutePath, LocaleType, RouteRef } from './types';\n\nexport class NotLocalizedEndRoute<Locales extends LocaleType = LocaleType>\n  implements EndRoute<Locales>, NotLocalizedRoute<EndRoutePath, Locales>\n{\n  path: EndRoutePath;\n\n  ref: RouteRef;\n\n  constructor(path: EndRoutePath, ref: RouteRef) {\n    this.path = path;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): EndRoutePath {\n    return this.path;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { NotLocalizedEndRoute } from './NotLocalizedEndRoute';\nimport type { SegmentRoute, NotLocalizedRoute } from './interfaces';\nimport type { LocaleType, SegmentRoutePath } from './types';\n\nexport class NotLocalizedSegmentRoute<Locales extends LocaleType = LocaleType>\n  implements\n    SegmentRoute<Locales>,\n    NotLocalizedRoute<SegmentRoutePath, Locales>\n{\n  path: SegmentRoutePath;\n\n  nestedRoutes: NotLocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: NotLocalizedEndRoute | undefined;\n\n  constructor(path: SegmentRoutePath) {\n    this.path = path;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePath {\n    return this.path;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { Key } from 'path-to-regexp';\nimport pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePath, EndRoutePath } from '../types';\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: true,\n): SegmentRoutePath;\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: false,\n): EndRoutePath;\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: boolean,\n): EndRoutePath | SegmentRoutePath {\n  const keys: Key[] = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map((key) => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n}\n\nexport const createRoutePathSegment = (\n  path: string,\n  completePath: string,\n): SegmentRoutePath => internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (\n  path: string,\n  completePath: string,\n): EndRoutePath => internalCreateRoutePath(path, completePath, false);\n","import { IS_DEV } from 'pob-babel';\nimport type {\n  LocaleType,\n  LocalizedPathsRecord,\n  EndRoutePath,\n  SegmentRoutePath,\n  RouteRef,\n} from '../types';\nimport { getKeys } from '../utils/getKeys';\nimport { LocalizedEndRoute } from './LocalizedEndRoute';\nimport { LocalizedSegmentRoute } from './LocalizedSegmentRoute';\nimport { NotLocalizedEndRoute as Route } from './NotLocalizedEndRoute';\nimport { NotLocalizedSegmentRoute } from './NotLocalizedSegmentRoute';\nimport { createRoutePath, createRoutePathSegment } from './createRoutePath';\n\nconst createLocalizedPaths = <\n  Locales extends LocaleType,\n  Path extends EndRoutePath | SegmentRoutePath,\n>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  segment: boolean,\n): Map<Locales, Path> => {\n  const localizedPaths = new Map<Locales, Path>();\n  getKeys(localizedPathsRecord).forEach((locale: Locales) => {\n    const path = localizedPathsRecord[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePath = createRoutePathSegment(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    } else {\n      const routerPath: EndRoutePath = createRoutePath(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: RouteRef): void => {\n  if (!ref) throw new Error(`Invalid ref: \"${JSON.stringify(ref)}\"`);\n};\n\nexport const createRoute = (\n  path: string,\n  completePath: string,\n  ref: RouteRef,\n): Route => {\n  /* istanbul ignore if */\n  if (IS_DEV) checkRef(ref);\n  const routePath: EndRoutePath = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  ref: RouteRef,\n): LocalizedEndRoute<Locales> => {\n  /* istanbul ignore if */\n  if (IS_DEV) checkRef(ref);\n  const localizedPaths = createLocalizedPaths<Locales, EndRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    false,\n  );\n  return new LocalizedEndRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (\n  path: string,\n  completePath: string,\n): NotLocalizedSegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new NotLocalizedSegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n): LocalizedSegmentRoute<Locales> => {\n  const localizedPaths = createLocalizedPaths<Locales, SegmentRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    true,\n  );\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import type { LocalizedSegmentRoute, LocalizedEndRoute } from '../routes';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute, SegmentRoute } from '../routes/interfaces';\nimport type { LocalizedPathsRecord, RouteRef, LocaleType } from '../types';\nimport { getKeys } from '../utils/getKeys';\n\nexport interface SegmentRouterBuilder<Locales extends LocaleType> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  defaultRoute: (ref: RouteRef, key?: string) => void;\n}\n\nexport function createSegmentRouterBuilderCreator<Locales extends LocaleType>(\n  defaultLocale: Locales | undefined,\n  addToRouteMap: (key: string, route: EndRoute<Locales>) => void,\n): (segmentRoute: SegmentRoute<Locales>) => SegmentRouterBuilder<Locales> {\n  const createSegmentRouterBuilder = (\n    segmentRoute: SegmentRoute<Locales>,\n  ): SegmentRouterBuilder<Locales> => {\n    const getCompletePath = (path: string, locale?: Locales): string =>\n      `${segmentRoute.getPath(locale).completePath}${path}`;\n\n    const getCompleteLocalizedPaths = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n    ): LocalizedPathsRecord<Locales> => {\n      const completeLocalizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n\n      getKeys(localizedPaths).forEach((locale: Locales) => {\n        completeLocalizedPaths[locale] = getCompletePath(\n          localizedPaths[locale],\n          locale,\n        );\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      segmentRoute: LocalizedSegmentRoute<Locales>,\n      path: string,\n    ): Record<Locales, string> => {\n      const localizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n      [...segmentRoute.localizedPaths.keys()].forEach((locale) => {\n        localizedPaths[locale] = path;\n      });\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): LocalizedEndRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale!];\n      const route = createLocalizedRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n        ref,\n      );\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (\n      path: string,\n      ref: RouteRef,\n      key?: string,\n    ): EndRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedEndRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          ref,\n          key,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): LocalizedSegmentRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n      );\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): SegmentRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedSegmentRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          buildSegment,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRef, key?: string): void => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRef, key?: string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        ref: RouteRef,\n        key?: string,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedEndRoute(localizedPaths, ref, key),\n        );\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedSegmentRoute(localizedPaths, buildSegment),\n        );\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n}\n","import type { Router } from '../router/createRouter';\nimport { createRouter } from '../router/createRouter';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute } from '../routes/interfaces';\nimport type {\n  LocaleType,\n  LocalizedPathsRecord,\n  Routes,\n  RouteMap,\n  RouteRef,\n} from '../types';\nimport type { SegmentRouterBuilder } from './createSegmentRouterBuilderCreator';\nimport { createSegmentRouterBuilderCreator } from './createSegmentRouterBuilderCreator';\n\nexport interface RouterBuilder<Locales extends LocaleType | never> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  createRouter: () => Router<Locales>;\n  getRoutes: () => Routes<Locales>;\n}\n\nexport function createRouterBuilder<Locales extends LocaleType>(\n  locales?: Locales[],\n): RouterBuilder<Locales> {\n  const defaultLocale = locales?.[0];\n  const routes: Routes<Locales> = [];\n  const routeMap: RouteMap<Locales> = new Map<string, EndRoute<Locales>>();\n\n  const addToRouteMap = (key: string, route: EndRoute<Locales>): void => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRef, key?: string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n}\n"],"names":["logger","Logger","undefined","parseOtherParams","wildcard","split","internalFindMatch","path","completePath","routes","locale","namedParams","result","some","route","routePath","getPath","isDev","Error","debug","regExp","toString","match","exec","shift","groupCount","length","group","Map","forEach","paramName","set","isSegment","segment","restOfThePath","nestedRoutes","defaultRoute","endRoute","otherParams","Object","freeze","ref","findMatch","createRouter","routeMap","getRequiredRoute","routeKey","get","find","toPath","key","args","toLocalizedPath","getKeys","o","keys","LocalizedEndRoute","localizedPaths","isLocalized","toJSON","entries","JSON","stringify","LocalizedSegmentRoute","NotLocalizedEndRoute","NotLocalizedSegmentRoute","internalCreateRoutePath","pathToRegExp","sensitive","strict","map","name","filter","Boolean","compile","createRoutePathSegment","createRoutePath","createLocalizedPaths","localizedPathsRecord","completeLocalizedPathsRecord","routerPath","checkRef","createRoute","Route","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","createSegmentRouterBuilderCreator","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","add","push","addLocalized","addSegment","addLocalizedSegment","createRouterBuilder","locales","has","getRoutes"],"mappings":"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"}