{"version":3,"file":"index-browser.cjs.js","sources":["../src/router/findMatch.ts","../src/router/createRouter.ts","../src/utils/getKeys.ts","../src/routes/LocalizedEndRoute.ts","../src/routes/LocalizedSegmentRoute.ts","../src/routes/NotLocalizedEndRoute.ts","../src/routes/NotLocalizedSegmentRoute.ts","../src/routes/createRoutePath.ts","../src/routes/create.ts","../src/builder/createSegmentRouterBuilderCreator.ts","../src/builder/createRouterBuilder.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { IS_DEV } from 'pob-babel';\nimport { Logger } from 'nightingale-logger';\nimport type { EndRoute, Route, SegmentRoute } from '../routes/interfaces';\nimport type {\n  LocaleType,\n  RoutePathInterface,\n  RouteRef,\n  SegmentRoutePath,\n  EndRoutePath,\n} from '../types';\n\nexport interface RouteMatch<Locales extends LocaleType | never = any> {\n  namedParams: Map<string, string> | undefined;\n  otherParams: string[] | undefined;\n  path: string;\n  ref: RouteRef;\n  route: Route<any, Locales>;\n  routePath: EndRoutePath | SegmentRoutePath;\n}\n\nconst logger = IS_DEV ? new Logger('router-segments:findMatch') : undefined;\n\nconst parseOtherParams = (wildcard: string): string[] =>\n  wildcard ? wildcard.split('/') : [];\n\nconst internalFindMatch = <Locales extends LocaleType>(\n  path: string,\n  completePath: string,\n  routes: Route<RoutePathInterface, Locales>[],\n  locale: Locales = 'en' as Locales,\n  namedParams?: Map<number | string, string>,\n): RouteMatch<Locales> | null => {\n  let result = null;\n\n  routes.some((route): boolean => {\n    const routePath: RoutePathInterface = route.getPath(locale);\n    const isDev = IS_DEV;\n\n    if (isDev && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (isDev && logger) {\n      logger.debug(`trying ${routePath.regExp.toString()}`);\n    }\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length > 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: number | string) => {\n        namedParams!.set(paramName, match[group++]);\n      });\n    }\n\n    if (route.isSegment()) {\n      const segment = route as SegmentRoute;\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = internalFindMatch(\n          `/${restOfThePath}`,\n          completePath,\n          segment.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!segment.defaultRoute) {\n        return false;\n      }\n\n      route = segment.defaultRoute;\n    }\n\n    const endRoute = route as EndRoute;\n\n    const otherParams =\n      group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ref: endRoute.ref,\n      path: completePath,\n      route: endRoute,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport function findMatch<Locales extends LocaleType>(\n  path: string,\n  routes: Route<RoutePathInterface, Locales>[],\n  locale?: Locales,\n): RouteMatch<Locales> | null {\n  return internalFindMatch(path, path, routes, locale);\n}\n","import type { EndRoute } from '../routes/interfaces';\nimport type { Routes, RouteMap, LocaleType } from '../types';\nimport type { RouteMatch } from './findMatch';\nimport { findMatch } from './findMatch';\n\nexport interface Router<Locales extends LocaleType | never = any> {\n  get: (key: string) => EndRoute<Locales>;\n  find: (path: string, locale?: Locales) => RouteMatch<Locales> | null;\n  toLocalizedPath: (locale: Locales, key: string, args?: any) => string;\n  toPath: (key: string, args?: any) => string;\n}\n\nexport function createRouter<Locales extends LocaleType | never>(\n  routes: Routes<Locales>,\n  routeMap: RouteMap<Locales>,\n): Router<Locales> {\n  const getRequiredRoute = (routeKey: string): EndRoute<Locales> => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: getRequiredRoute,\n    find: (path: string, locale?: Locales): RouteMatch<Locales> | null =>\n      findMatch(path, routes, locale),\n    toPath: (key: string, args?: Record<string, any>): string =>\n      getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (\n      locale: Locales,\n      key: string,\n      args?: Record<string, any>,\n    ): string => getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n}\n","export const getKeys = <T extends Record<string, unknown>>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import type { EndRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, EndRoutePath, RouteRef } from './types';\n\nexport class LocalizedEndRoute<Locales extends LocaleType>\n  implements EndRoute<Locales>, LocalizedRoute<EndRoutePath, Locales>\n{\n  localizedPaths: Map<LocaleType, EndRoutePath>;\n\n  ref: RouteRef;\n\n  constructor(localizedPaths: Map<LocaleType, EndRoutePath>, ref: RouteRef) {\n    this.localizedPaths = localizedPaths;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale?: Locales): EndRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale)!;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocalizedEndRoute } from './LocalizedEndRoute';\nimport type { SegmentRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, SegmentRoutePath } from './types';\n\nexport class LocalizedSegmentRoute<Locales extends LocaleType>\n  implements SegmentRoute<Locales>, LocalizedRoute<SegmentRoutePath, Locales>\n{\n  localizedPaths: Map<Locales, SegmentRoutePath>;\n\n  nestedRoutes: LocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: LocalizedEndRoute<Locales> | undefined;\n\n  constructor(localizedPaths: Map<Locales, SegmentRoutePath>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale?: Locales): SegmentRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale)!;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { EndRoute, NotLocalizedRoute } from './interfaces';\nimport type { EndRoutePath, LocaleType, RouteRef } from './types';\n\nexport class NotLocalizedEndRoute<Locales extends LocaleType = LocaleType>\n  implements EndRoute<Locales>, NotLocalizedRoute<EndRoutePath, Locales>\n{\n  path: EndRoutePath;\n\n  ref: RouteRef;\n\n  constructor(path: EndRoutePath, ref: RouteRef) {\n    this.path = path;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): EndRoutePath {\n    return this.path;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { NotLocalizedEndRoute } from './NotLocalizedEndRoute';\nimport type { SegmentRoute, NotLocalizedRoute } from './interfaces';\nimport type { LocaleType, SegmentRoutePath } from './types';\n\nexport class NotLocalizedSegmentRoute<Locales extends LocaleType = LocaleType>\n  implements\n    SegmentRoute<Locales>,\n    NotLocalizedRoute<SegmentRoutePath, Locales>\n{\n  path: SegmentRoutePath;\n\n  nestedRoutes: NotLocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: NotLocalizedEndRoute | undefined;\n\n  constructor(path: SegmentRoutePath) {\n    this.path = path;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePath {\n    return this.path;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { Key } from 'path-to-regexp';\nimport pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePath, EndRoutePath } from '../types';\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: true,\n): SegmentRoutePath;\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: false,\n): EndRoutePath;\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: boolean,\n): EndRoutePath | SegmentRoutePath {\n  const keys: Key[] = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map((key) => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n}\n\nexport const createRoutePathSegment = (\n  path: string,\n  completePath: string,\n): SegmentRoutePath => internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (\n  path: string,\n  completePath: string,\n): EndRoutePath => internalCreateRoutePath(path, completePath, false);\n","import { IS_DEV } from 'pob-babel';\nimport type {\n  LocaleType,\n  LocalizedPathsRecord,\n  EndRoutePath,\n  SegmentRoutePath,\n  RouteRef,\n} from '../types';\nimport { getKeys } from '../utils/getKeys';\nimport { LocalizedEndRoute } from './LocalizedEndRoute';\nimport { LocalizedSegmentRoute } from './LocalizedSegmentRoute';\nimport { NotLocalizedEndRoute as Route } from './NotLocalizedEndRoute';\nimport { NotLocalizedSegmentRoute } from './NotLocalizedSegmentRoute';\nimport { createRoutePath, createRoutePathSegment } from './createRoutePath';\n\nconst createLocalizedPaths = <\n  Locales extends LocaleType,\n  Path extends EndRoutePath | SegmentRoutePath,\n>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  segment: boolean,\n): Map<Locales, Path> => {\n  const localizedPaths = new Map<Locales, Path>();\n  getKeys(localizedPathsRecord).forEach((locale: Locales) => {\n    const path = localizedPathsRecord[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePath = createRoutePathSegment(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    } else {\n      const routerPath: EndRoutePath = createRoutePath(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: RouteRef): void => {\n  if (!ref) throw new Error(`Invalid ref: \"${JSON.stringify(ref)}\"`);\n};\n\nexport const createRoute = (\n  path: string,\n  completePath: string,\n  ref: RouteRef,\n): Route => {\n  /* istanbul ignore if */\n  if (IS_DEV) checkRef(ref);\n  const routePath: EndRoutePath = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  ref: RouteRef,\n): LocalizedEndRoute<Locales> => {\n  /* istanbul ignore if */\n  if (IS_DEV) checkRef(ref);\n  const localizedPaths = createLocalizedPaths<Locales, EndRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    false,\n  );\n  return new LocalizedEndRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (\n  path: string,\n  completePath: string,\n): NotLocalizedSegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new NotLocalizedSegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n): LocalizedSegmentRoute<Locales> => {\n  const localizedPaths = createLocalizedPaths<Locales, SegmentRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    true,\n  );\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import type { LocalizedSegmentRoute, LocalizedEndRoute } from '../routes';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute, SegmentRoute } from '../routes/interfaces';\nimport type { LocalizedPathsRecord, RouteRef, LocaleType } from '../types';\nimport { getKeys } from '../utils/getKeys';\n\nexport interface SegmentRouterBuilder<Locales extends LocaleType> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  defaultRoute: (ref: RouteRef, key?: string) => void;\n}\n\nexport function createSegmentRouterBuilderCreator<Locales extends LocaleType>(\n  defaultLocale: Locales | undefined,\n  addToRouteMap: (key: string, route: EndRoute<Locales>) => void,\n): (segmentRoute: SegmentRoute<Locales>) => SegmentRouterBuilder<Locales> {\n  const createSegmentRouterBuilder = (\n    segmentRoute: SegmentRoute<Locales>,\n  ): SegmentRouterBuilder<Locales> => {\n    const getCompletePath = (path: string, locale?: Locales): string =>\n      `${segmentRoute.getPath(locale).completePath}${path}`;\n\n    const getCompleteLocalizedPaths = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n    ): LocalizedPathsRecord<Locales> => {\n      const completeLocalizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n\n      getKeys(localizedPaths).forEach((locale: Locales) => {\n        completeLocalizedPaths[locale] = getCompletePath(\n          localizedPaths[locale],\n          locale,\n        );\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      segmentRoute: LocalizedSegmentRoute<Locales>,\n      path: string,\n    ): Record<Locales, string> => {\n      const localizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n      [...segmentRoute.localizedPaths.keys()].forEach((locale) => {\n        localizedPaths[locale] = path;\n      });\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): LocalizedEndRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale!];\n      const route = createLocalizedRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n        ref,\n      );\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (\n      path: string,\n      ref: RouteRef,\n      key?: string,\n    ): EndRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedEndRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          ref,\n          key,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): LocalizedSegmentRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n      );\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): SegmentRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedSegmentRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          buildSegment,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRef, key?: string): void => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRef, key?: string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        ref: RouteRef,\n        key?: string,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedEndRoute(localizedPaths, ref, key),\n        );\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedSegmentRoute(localizedPaths, buildSegment),\n        );\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n}\n","import type { Router } from '../router/createRouter';\nimport { createRouter } from '../router/createRouter';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute } from '../routes/interfaces';\nimport type {\n  LocaleType,\n  LocalizedPathsRecord,\n  Routes,\n  RouteMap,\n  RouteRef,\n} from '../types';\nimport type { SegmentRouterBuilder } from './createSegmentRouterBuilderCreator';\nimport { createSegmentRouterBuilderCreator } from './createSegmentRouterBuilderCreator';\n\nexport interface RouterBuilder<Locales extends LocaleType | never> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  createRouter: () => Router<Locales>;\n  getRoutes: () => Routes<Locales>;\n}\n\nexport function createRouterBuilder<Locales extends LocaleType>(\n  locales?: Locales[],\n): RouterBuilder<Locales> {\n  const defaultLocale = locales?.[0];\n  const routes: Routes<Locales> = [];\n  const routeMap: RouteMap<Locales> = new Map<string, EndRoute<Locales>>();\n\n  const addToRouteMap = (key: string, route: EndRoute<Locales>): void => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRef, key?: string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n}\n"],"names":["logger","Logger","undefined","parseOtherParams","wildcard","split","internalFindMatch","path","completePath","routes","locale","namedParams","result","some","route","routePath","getPath","isDev","Error","debug","regExp","toString","match","exec","shift","groupCount","length","group","Map","forEach","paramName","set","isSegment","segment","restOfThePath","nestedRoutes","defaultRoute","endRoute","otherParams","Object","freeze","ref","findMatch","createRouter","routeMap","getRequiredRoute","routeKey","get","find","toPath","key","args","toLocalizedPath","getKeys","o","keys","LocalizedEndRoute","localizedPaths","isLocalized","toJSON","entries","JSON","stringify","LocalizedSegmentRoute","NotLocalizedEndRoute","NotLocalizedSegmentRoute","internalCreateRoutePath","pathToRegExp","sensitive","strict","map","name","filter","Boolean","compile","createRoutePathSegment","createRoutePath","createLocalizedPaths","localizedPathsRecord","completeLocalizedPathsRecord","routerPath","checkRef","createRoute","Route","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","createSegmentRouterBuilderCreator","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","add","push","addLocalized","addSegment","addLocalizedSegment","createRouterBuilder","locales","has","getRoutes"],"mappings":"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"}