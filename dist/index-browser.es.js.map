{"version":3,"file":"index-browser.es.js","sources":["../src/utils/getKeys.ts","../src/routes/createRoutePath.ts","../src/routes/NotLocalizedEndRoute.ts","../src/routes/LocalizedEndRoute.ts","../src/routes/NotLocalizedSegmentRoute.ts","../src/routes/LocalizedSegmentRoute.ts","../src/routes/create.ts","../src/router/findMatch.ts","../src/router/createRouter.ts","../src/builder/createSegmentRouterBuilderCreator.ts","../src/builder/createRouterBuilder.ts"],"sourcesContent":["export const getKeys = <T extends {}>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import pathToRegExp, { Key } from 'path-to-regexp';\nimport { SegmentRoutePath, EndRoutePath } from '../types';\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: true,\n): SegmentRoutePath;\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: false,\n): EndRoutePath;\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePath | EndRoutePath {\n  const keys: Key[] = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map((key) => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n}\n\nexport const createRoutePathSegment = (\n  path: string,\n  completePath: string,\n): SegmentRoutePath => internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (\n  path: string,\n  completePath: string,\n): EndRoutePath => internalCreateRoutePath(path, completePath, false);\n","import { EndRoutePath, RouteRef } from './types';\nimport { EndRoute, NotLocalizedRoute } from './interfaces';\n\nexport default class NotLocalizedEndRoute\n  implements EndRoute, NotLocalizedRoute<EndRoutePath> {\n  path: EndRoutePath;\n\n  ref: RouteRef;\n\n  constructor(path: EndRoutePath, ref: RouteRef) {\n    this.path = path;\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): EndRoutePath {\n    return this.path;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import { LocaleType, EndRoutePath, RouteRef } from './types';\nimport { EndRoute, LocalizedRoute } from './interfaces';\n\nexport default class LocalizedEndRoute<Locales extends LocaleType>\n  implements EndRoute, LocalizedRoute<EndRoutePath, Locales> {\n  localizedPaths: Map<LocaleType, EndRoutePath>;\n\n  ref: RouteRef;\n\n  constructor(localizedPaths: Map<LocaleType, EndRoutePath>, ref: RouteRef) {\n    this.localizedPaths = localizedPaths;\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale: Locales): EndRoutePath {\n    return this.localizedPaths.get(locale) as EndRoutePath;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON() {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import NotLocalizedEndRoute from './NotLocalizedEndRoute';\nimport { SegmentRoute, NotLocalizedRoute } from './interfaces';\nimport { SegmentRoutePath } from './types';\n\nexport default class NotLocalizedSegmentRoute\n  implements SegmentRoute, NotLocalizedRoute<SegmentRoutePath> {\n  path: SegmentRoutePath;\n\n  nestedRoutes: NotLocalizedRoute<any>[] = [];\n\n  defaultRoute: undefined | NotLocalizedEndRoute;\n\n  constructor(path: SegmentRoutePath) {\n    this.path = path;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePath {\n    return this.path;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import LocalizedEndRoute from './LocalizedEndRoute';\nimport { LocaleType, SegmentRoutePath } from './types';\nimport { SegmentRoute, LocalizedRoute } from './interfaces';\n\nexport default class LocalizedSegmentRoute<Locales extends LocaleType>\n  implements SegmentRoute, LocalizedRoute<SegmentRoutePath, Locales> {\n  localizedPaths: Map<Locales, SegmentRoutePath>;\n\n  nestedRoutes: LocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: undefined | LocalizedEndRoute<Locales>;\n\n  constructor(localizedPaths: Map<Locales, SegmentRoutePath>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale: Locales): SegmentRoutePath {\n    return this.localizedPaths.get(locale) as SegmentRoutePath;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON() {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import { PRODUCTION } from 'pob-babel';\nimport {\n  LocaleType,\n  LocalizedPathsRecord,\n  EndRoutePath,\n  SegmentRoutePath,\n  RouteRef,\n} from '../types';\nimport { getKeys } from '../utils/getKeys';\nimport { createRoutePath, createRoutePathSegment } from './createRoutePath';\nimport Route from './NotLocalizedEndRoute';\nimport LocalizedEndRoute from './LocalizedEndRoute';\nimport NotLocalizedSegmentRoute from './NotLocalizedSegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nconst createLocalizedPaths = <\n  Locales extends LocaleType,\n  Path extends SegmentRoutePath | EndRoutePath\n>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  segment: boolean,\n): Map<Locales, Path> => {\n  const localizedPaths = new Map();\n  getKeys(localizedPathsRecord).forEach((locale: Locales) => {\n    const path = localizedPathsRecord[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePath = createRoutePathSegment(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    } else {\n      const routerPath: EndRoutePath = createRoutePath(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: RouteRef): void => {\n  if (!ref) throw new Error(`Invalid ref: \"${ref}\"`);\n};\n\nexport const createRoute = (\n  path: string,\n  completePath: string,\n  ref: RouteRef,\n): Route => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: EndRoutePath = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  ref: RouteRef,\n): LocalizedEndRoute<Locales> => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths<Locales, EndRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    false,\n  );\n  return new LocalizedEndRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (\n  path: string,\n  completePath: string,\n): NotLocalizedSegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new NotLocalizedSegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n): LocalizedSegmentRoute<Locales> => {\n  const localizedPaths = createLocalizedPaths<Locales, SegmentRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    true,\n  );\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import { PRODUCTION } from 'pob-babel';\nimport Logger from 'nightingale-logger';\nimport {\n  Routes,\n  LocaleType,\n  RoutePathInterface,\n  RouteRef,\n  SegmentRoutePath,\n  EndRoutePath,\n} from '../types';\nimport { EndRoute, Route, SegmentRoute } from '../routes/interfaces';\n\nexport interface RouteMatch<Locales extends LocaleType | never> {\n  namedParams: undefined | Map<string, string>;\n  otherParams: undefined | string[];\n  path: string;\n  ref: RouteRef;\n  route: Route<any, Locales>;\n  routePath: SegmentRoutePath | EndRoutePath;\n}\n\nconst logger = !PRODUCTION\n  ? new Logger('router-segments:findMatch')\n  : undefined;\n\nconst parseOtherParams = (wildcard: string) =>\n  wildcard ? wildcard.split('/') : [];\n\nconst internalFindMatch = <Locales extends LocaleType>(\n  path: string,\n  completePath: string,\n  routes: Routes<Locales>,\n  locale: Locales = 'en' as Locales,\n  namedParams?: Map<string | number, string>,\n): null | RouteMatch<Locales> => {\n  let result = null;\n\n  routes.some((route): boolean => {\n    const routePath: RoutePathInterface = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION && logger) {\n      logger.debug(`trying ${routePath.regExp}`);\n    }\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length !== 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string | number) => {\n        (namedParams as Map<string | number, string>).set(\n          paramName,\n          match[group++],\n        );\n      });\n    }\n\n    if (route.isSegment()) {\n      const segment = route as SegmentRoute;\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = internalFindMatch(\n          `/${restOfThePath}`,\n          completePath,\n          segment.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!segment.defaultRoute) {\n        return false;\n      }\n\n      route = segment.defaultRoute;\n    }\n\n    const endRoute = route as EndRoute;\n\n    const otherParams =\n      group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      ref: endRoute.ref,\n      path: completePath,\n      route: endRoute,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default function findMatch<Locales extends LocaleType>(\n  path: string,\n  routes: Routes<Locales>,\n  locale?: Locales,\n): null | RouteMatch<Locales> {\n  return internalFindMatch(path, path, routes, locale);\n}\n","import { Routes, RouteMap, LocaleType } from '../types';\nimport { EndRoute } from '../routes/interfaces';\nimport findMatch, { RouteMatch } from './findMatch';\n\nexport interface Router<Locales extends LocaleType | never> {\n  get(key: string): EndRoute;\n  find(path: string, locale?: Locales): null | RouteMatch<Locales>;\n  toLocalizedPath(locale: Locales, key: string, args?: any): string;\n  toPath(key: string, args?: any): string;\n}\n\nexport default function createRouter<Locales extends LocaleType | never>(\n  routes: Routes<Locales>,\n  routeMap: RouteMap<Locales>,\n): Router<Locales> {\n  const getRequiredRoute = (routeKey: string): EndRoute => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: getRequiredRoute,\n    find: (path: string, locale?: Locales): null | RouteMatch<Locales> =>\n      findMatch(path, routes, locale),\n    toPath: (key: string, args?: any): string =>\n      getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (locale: Locales, key: string, args?: any): string =>\n      getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n}\n","import { LocalizedPathsRecord, RouteRef, LocaleType } from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport { LocalizedSegmentRoute, LocalizedEndRoute } from '../routes';\nimport { EndRoute, SegmentRoute } from '../routes/interfaces';\nimport { getKeys } from '../utils/getKeys';\n\nexport interface SegmentRouterBuilder<Locales extends LocaleType> {\n  add(path: string, ref: RouteRef, key?: string): void;\n  addLocalized(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ): void;\n  addLocalizedSegment(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  addSegment(\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  defaultRoute(ref: RouteRef, key?: string): void;\n}\n\nexport default function createSegmentRouterBuilderCreator<\n  Locales extends LocaleType\n>(\n  defaultLocale: undefined | Locales,\n  addToRouteMap: (key: string, route: EndRoute<Locales>) => void,\n): (segmentRoute: SegmentRoute<Locales>) => SegmentRouterBuilder<Locales> {\n  const createSegmentRouterBuilder = (\n    segmentRoute: SegmentRoute<Locales>,\n  ): SegmentRouterBuilder<Locales> => {\n    const getCompletePath = (path: string, locale?: Locales): string =>\n      `${segmentRoute.getPath(locale).completePath}${path}`;\n\n    const getCompleteLocalizedPaths = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n    ): LocalizedPathsRecord<Locales> => {\n      const completeLocalizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n\n      getKeys(localizedPaths).forEach((locale: Locales) => {\n        completeLocalizedPaths[locale] = getCompletePath(\n          localizedPaths[locale],\n          locale,\n        );\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (\n      segmentRoute: LocalizedSegmentRoute<Locales>,\n      path: string,\n    ): Record<Locales, string> => {\n      const localizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n      [...segmentRoute.localizedPaths.keys()].forEach((locale) => {\n        localizedPaths[locale] = path;\n      });\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): LocalizedEndRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string =\n        key || completeLocalizedPaths[defaultLocale as Locales];\n      const route = createLocalizedRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n        ref,\n      );\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (\n      path: string,\n      ref: RouteRef,\n      key?: string,\n    ): EndRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedEndRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          ref,\n          key,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): LocalizedSegmentRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n      );\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): SegmentRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedSegmentRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          buildSegment,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRef, key?: string): void => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRef, key?: string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        ref: RouteRef,\n        key?: string,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedEndRoute(localizedPaths, ref, key),\n        );\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedSegmentRoute(localizedPaths, buildSegment),\n        );\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n}\n","import {\n  LocaleType,\n  LocalizedPathsRecord,\n  Routes,\n  RouteMap,\n  RouteRef,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter, { Router } from '../router/createRouter';\nimport { EndRoute } from '../routes/interfaces';\nimport createSegmentRouterBuilderCreator, {\n  SegmentRouterBuilder,\n} from './createSegmentRouterBuilderCreator';\n\nexport interface RouterBuilder<Locales extends LocaleType | never> {\n  add(path: string, ref: RouteRef, key?: string): void;\n  addLocalized(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ): void;\n  addLocalizedSegment(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  addSegment(\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  createRouter(): Router<Locales>;\n  getRoutes(): Routes<Locales>;\n}\n\nexport default function createRouterBuilder<Locales extends LocaleType>(\n  locales?: Locales[],\n): RouterBuilder<Locales> {\n  const defaultLocale = locales?.[0];\n  const routes: Routes<Locales> = [];\n  const routeMap: RouteMap<Locales> = new Map();\n\n  const addToRouteMap = (key: string, route: EndRoute<Locales>) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRef, key?: string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n}\n"],"names":["getKeys","o","Object","keys","internalCreateRoutePath","path","completePath","segment","regExp","pathToRegExp","sensitive","strict","namedParams","map","key","name","filter","Boolean","toPath","compile","createRoutePathSegment","createRoutePath","NotLocalizedEndRoute","ref","getPath","isSegment","isLocalized","toJSON","toString","JSON","stringify","LocalizedEndRoute","localizedPaths","freeze","locale","get","entries","NotLocalizedSegmentRoute","nestedRoutes","LocalizedSegmentRoute","createLocalizedPaths","localizedPathsRecord","completeLocalizedPathsRecord","Map","forEach","routerPath","set","createRoute","routePath","Route","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","parseOtherParams","wildcard","split","internalFindMatch","routes","result","some","route","match","exec","shift","groupCount","length","group","paramName","restOfThePath","defaultRoute","endRoute","otherParams","undefined","findMatch","createRouter","routeMap","getRequiredRoute","routeKey","Error","find","args","toLocalizedPath","createSegmentRouterBuilderCreator","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","add","push","addLocalized","addSegment","addLocalizedSegment","createRouterBuilder","locales","has","getRoutes"],"mappings":"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"}