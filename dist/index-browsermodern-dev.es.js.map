{"version":3,"file":"index-browsermodern-dev.es.js","sources":["../src/utils/getKeys.ts","../src/routes/createRoutePath.ts","../src/routes/NotLocalizedEndRoute.ts","../src/routes/LocalizedEndRoute.ts","../src/routes/NotLocalizedSegmentRoute.ts","../src/routes/LocalizedSegmentRoute.ts","../src/routes/create.ts","../src/router/findMatch.ts","../src/router/createRouter.ts","../src/builder/createSegmentRouterBuilderCreator.ts","../src/builder/createRouterBuilder.ts"],"sourcesContent":["export const getKeys = <T extends {}>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import pathToRegExp, { Key } from 'path-to-regexp';\nimport { SegmentRoutePath, EndRoutePath } from '../types';\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: true,\n): SegmentRoutePath;\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: false,\n): EndRoutePath;\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePath | EndRoutePath {\n  const keys: Key[] = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map((key) => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n}\n\nexport const createRoutePathSegment = (\n  path: string,\n  completePath: string,\n): SegmentRoutePath => internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (\n  path: string,\n  completePath: string,\n): EndRoutePath => internalCreateRoutePath(path, completePath, false);\n","import { EndRoutePath, RouteRef } from './types';\nimport { EndRoute, NotLocalizedRoute } from './interfaces';\n\nexport default class NotLocalizedEndRoute\n  implements EndRoute, NotLocalizedRoute<EndRoutePath> {\n  path: EndRoutePath;\n\n  ref: RouteRef;\n\n  constructor(path: EndRoutePath, ref: RouteRef) {\n    this.path = path;\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): EndRoutePath {\n    return this.path;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import { LocaleType, EndRoutePath, RouteRef } from './types';\nimport { EndRoute, LocalizedRoute } from './interfaces';\n\nexport default class LocalizedEndRoute<Locales extends LocaleType>\n  implements EndRoute, LocalizedRoute<EndRoutePath, Locales> {\n  localizedPaths: Map<LocaleType, EndRoutePath>;\n\n  ref: RouteRef;\n\n  constructor(localizedPaths: Map<LocaleType, EndRoutePath>, ref: RouteRef) {\n    this.localizedPaths = localizedPaths;\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale: Locales): EndRoutePath {\n    return this.localizedPaths.get(locale) as EndRoutePath;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON() {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import NotLocalizedEndRoute from './NotLocalizedEndRoute';\nimport { SegmentRoute, NotLocalizedRoute } from './interfaces';\nimport { SegmentRoutePath } from './types';\n\nexport default class NotLocalizedSegmentRoute\n  implements SegmentRoute, NotLocalizedRoute<SegmentRoutePath> {\n  path: SegmentRoutePath;\n\n  nestedRoutes: NotLocalizedRoute<any>[] = [];\n\n  defaultRoute: undefined | NotLocalizedEndRoute;\n\n  constructor(path: SegmentRoutePath) {\n    this.path = path;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePath {\n    return this.path;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import LocalizedEndRoute from './LocalizedEndRoute';\nimport { LocaleType, SegmentRoutePath } from './types';\nimport { SegmentRoute, LocalizedRoute } from './interfaces';\n\nexport default class LocalizedSegmentRoute<Locales extends LocaleType>\n  implements SegmentRoute, LocalizedRoute<SegmentRoutePath, Locales> {\n  localizedPaths: Map<Locales, SegmentRoutePath>;\n\n  nestedRoutes: LocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: undefined | LocalizedEndRoute<Locales>;\n\n  constructor(localizedPaths: Map<Locales, SegmentRoutePath>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale: Locales): SegmentRoutePath {\n    return this.localizedPaths.get(locale) as SegmentRoutePath;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON() {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import { PRODUCTION } from 'pob-babel';\nimport {\n  LocaleType,\n  LocalizedPathsRecord,\n  EndRoutePath,\n  SegmentRoutePath,\n  RouteRef,\n} from '../types';\nimport { getKeys } from '../utils/getKeys';\nimport { createRoutePath, createRoutePathSegment } from './createRoutePath';\nimport Route from './NotLocalizedEndRoute';\nimport LocalizedEndRoute from './LocalizedEndRoute';\nimport NotLocalizedSegmentRoute from './NotLocalizedSegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nconst createLocalizedPaths = <\n  Locales extends LocaleType,\n  Path extends SegmentRoutePath | EndRoutePath\n>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  segment: boolean,\n): Map<Locales, Path> => {\n  const localizedPaths = new Map();\n  getKeys(localizedPathsRecord).forEach((locale: Locales) => {\n    const path = localizedPathsRecord[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePath = createRoutePathSegment(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    } else {\n      const routerPath: EndRoutePath = createRoutePath(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: RouteRef): void => {\n  if (!ref) throw new Error(`Invalid ref: \"${ref}\"`);\n};\n\nexport const createRoute = (\n  path: string,\n  completePath: string,\n  ref: RouteRef,\n): Route => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: EndRoutePath = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  ref: RouteRef,\n): LocalizedEndRoute<Locales> => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths<Locales, EndRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    false,\n  );\n  return new LocalizedEndRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (\n  path: string,\n  completePath: string,\n): NotLocalizedSegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new NotLocalizedSegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n): LocalizedSegmentRoute<Locales> => {\n  const localizedPaths = createLocalizedPaths<Locales, SegmentRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    true,\n  );\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import { PRODUCTION } from 'pob-babel';\nimport Logger from 'nightingale-logger';\nimport {\n  Routes,\n  LocaleType,\n  RoutePathInterface,\n  RouteRef,\n  SegmentRoutePath,\n  EndRoutePath,\n} from '../types';\nimport { EndRoute, Route, SegmentRoute } from '../routes/interfaces';\n\nexport interface RouteMatch<Locales extends LocaleType | never> {\n  namedParams: undefined | Map<string, string>;\n  otherParams: undefined | string[];\n  path: string;\n  ref: RouteRef;\n  route: Route<any, Locales>;\n  routePath: SegmentRoutePath | EndRoutePath;\n}\n\nconst logger = !PRODUCTION\n  ? new Logger('router-segments:findMatch')\n  : undefined;\n\nconst parseOtherParams = (wildcard: string) =>\n  wildcard ? wildcard.split('/') : [];\n\nconst internalFindMatch = <Locales extends LocaleType>(\n  path: string,\n  completePath: string,\n  routes: Routes<Locales>,\n  locale: Locales = 'en' as Locales,\n  namedParams?: Map<string | number, string>,\n): null | RouteMatch<Locales> => {\n  let result = null;\n\n  routes.some((route): boolean => {\n    const routePath: RoutePathInterface = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION && logger) {\n      logger.debug(`trying ${routePath.regExp}`);\n    }\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length !== 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string | number) => {\n        (namedParams as Map<string | number, string>).set(\n          paramName,\n          match[group++],\n        );\n      });\n    }\n\n    if (route.isSegment()) {\n      const segment = route as SegmentRoute;\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = internalFindMatch(\n          `/${restOfThePath}`,\n          completePath,\n          segment.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!segment.defaultRoute) {\n        return false;\n      }\n\n      route = segment.defaultRoute;\n    }\n\n    const endRoute = route as EndRoute;\n\n    const otherParams =\n      group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      ref: endRoute.ref,\n      path: completePath,\n      route: endRoute,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default function findMatch<Locales extends LocaleType>(\n  path: string,\n  routes: Routes<Locales>,\n  locale?: Locales,\n): null | RouteMatch<Locales> {\n  return internalFindMatch(path, path, routes, locale);\n}\n","import { Routes, RouteMap, LocaleType } from '../types';\nimport { EndRoute } from '../routes/interfaces';\nimport findMatch, { RouteMatch } from './findMatch';\n\nexport interface Router<Locales extends LocaleType | never> {\n  get(key: string): EndRoute;\n  find(path: string, locale?: Locales): null | RouteMatch<Locales>;\n  toLocalizedPath(locale: Locales, key: string, args?: any): string;\n  toPath(key: string, args?: any): string;\n}\n\nexport default function createRouter<Locales extends LocaleType | never>(\n  routes: Routes<Locales>,\n  routeMap: RouteMap<Locales>,\n): Router<Locales> {\n  const getRequiredRoute = (routeKey: string): EndRoute => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: getRequiredRoute,\n    find: (path: string, locale?: Locales): null | RouteMatch<Locales> =>\n      findMatch(path, routes, locale),\n    toPath: (key: string, args?: any): string =>\n      getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (locale: Locales, key: string, args?: any): string =>\n      getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n}\n","import { LocalizedPathsRecord, RouteRef, LocaleType } from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport { LocalizedSegmentRoute, LocalizedEndRoute } from '../routes';\nimport { EndRoute, SegmentRoute } from '../routes/interfaces';\nimport { getKeys } from '../utils/getKeys';\n\nexport interface SegmentRouterBuilder<Locales extends LocaleType> {\n  add(path: string, ref: RouteRef, key?: string): void;\n  addLocalized(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ): void;\n  addLocalizedSegment(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  addSegment(\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  defaultRoute(ref: RouteRef, key?: string): void;\n}\n\nexport default function createSegmentRouterBuilderCreator<\n  Locales extends LocaleType\n>(\n  defaultLocale: undefined | Locales,\n  addToRouteMap: (key: string, route: EndRoute<Locales>) => void,\n): (segmentRoute: SegmentRoute<Locales>) => SegmentRouterBuilder<Locales> {\n  const createSegmentRouterBuilder = (\n    segmentRoute: SegmentRoute<Locales>,\n  ): SegmentRouterBuilder<Locales> => {\n    const getCompletePath = (path: string, locale?: Locales): string =>\n      `${segmentRoute.getPath(locale).completePath}${path}`;\n\n    const getCompleteLocalizedPaths = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n    ): LocalizedPathsRecord<Locales> => {\n      const completeLocalizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n\n      getKeys(localizedPaths).forEach((locale: Locales) => {\n        completeLocalizedPaths[locale] = getCompletePath(\n          localizedPaths[locale],\n          locale,\n        );\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (\n      segmentRoute: LocalizedSegmentRoute<Locales>,\n      path: string,\n    ): Record<Locales, string> => {\n      const localizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n      [...segmentRoute.localizedPaths.keys()].forEach((locale) => {\n        localizedPaths[locale] = path;\n      });\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): LocalizedEndRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string =\n        key || completeLocalizedPaths[defaultLocale as Locales];\n      const route = createLocalizedRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n        ref,\n      );\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (\n      path: string,\n      ref: RouteRef,\n      key?: string,\n    ): EndRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedEndRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          ref,\n          key,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): LocalizedSegmentRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n      );\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): SegmentRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedSegmentRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          buildSegment,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRef, key?: string): void => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRef, key?: string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        ref: RouteRef,\n        key?: string,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedEndRoute(localizedPaths, ref, key),\n        );\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedSegmentRoute(localizedPaths, buildSegment),\n        );\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n}\n","import {\n  LocaleType,\n  LocalizedPathsRecord,\n  Routes,\n  RouteMap,\n  RouteRef,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter, { Router } from '../router/createRouter';\nimport { EndRoute } from '../routes/interfaces';\nimport createSegmentRouterBuilderCreator, {\n  SegmentRouterBuilder,\n} from './createSegmentRouterBuilderCreator';\n\nexport interface RouterBuilder<Locales extends LocaleType | never> {\n  add(path: string, ref: RouteRef, key?: string): void;\n  addLocalized(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ): void;\n  addLocalizedSegment(\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  addSegment(\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ): void;\n  createRouter(): Router<Locales>;\n  getRoutes(): Routes<Locales>;\n}\n\nexport default function createRouterBuilder<Locales extends LocaleType>(\n  locales?: Locales[],\n): RouterBuilder<Locales> {\n  const defaultLocale = locales?.[0];\n  const routes: Routes<Locales> = [];\n  const routeMap: RouteMap<Locales> = new Map();\n\n  const addToRouteMap = (key: string, route: EndRoute<Locales>) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRef, key?: string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n}\n"],"names":["getKeys","o","Object","keys","internalCreateRoutePath","path","completePath","segment","regExp","pathToRegExp","sensitive","strict","namedParams","map","key","name","filter","Boolean","toPath","compile","createRoutePathSegment","createRoutePath","NotLocalizedEndRoute","constructor","ref","getPath","isSegment","isLocalized","toJSON","toString","JSON","stringify","LocalizedEndRoute","localizedPaths","freeze","locale","get","entries","NotLocalizedSegmentRoute","nestedRoutes","LocalizedSegmentRoute","createLocalizedPaths","localizedPathsRecord","completeLocalizedPathsRecord","Map","forEach","routerPath","set","checkRef","Error","createRoute","routePath","Route","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","logger","Logger","parseOtherParams","wildcard","split","internalFindMatch","routes","result","some","route","debug","match","exec","shift","groupCount","length","group","paramName","restOfThePath","defaultRoute","endRoute","otherParams","undefined","findMatch","createRouter","routeMap","getRequiredRoute","routeKey","find","args","toLocalizedPath","createSegmentRouterBuilderCreator","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","add","push","addLocalized","addSegment","addLocalizedSegment","createRouterBuilder","locales","has","getRoutes"],"mappings":"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"}