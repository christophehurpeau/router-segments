{"version":3,"file":"index-browsermodern.es.js","sources":["../src/routes/createRoutePath.js","../src/routes/EndRoute.js","../src/routes/LocalizedEndRoute.js","../src/routes/SegmentRoute.js","../src/routes/LocalizedSegmentRoute.js","../src/routes/create.js","../src/router/findMatch.js","../src/router/createRouter.js","../src/builder/createSegmentRouterBuilderCreator.js","../src/builder/createRouterBuilder.js"],"sourcesContent":["import pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePathType, RoutePathType } from '../types';\n\nconst internalCreateRoutePath = (\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePathType | RoutePathType => {\n  const keys = [];\n  const regExp = pathToRegExp(segment ? `${path}(.*)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map(key => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n};\n\nexport const createRoutePathSegment = (path: string, completePath: string): SegmentRoutePathType =>\n  internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (path: string, completePath: string): RoutePathType =>\n  internalCreateRoutePath(path, completePath, false);\n","import type { RoutePathType, RouteRefType } from './types';\n\nexport default class EndRoute {\n  path: RoutePathType;\n  ref: RouteRefType;\n\n  constructor(path: RoutePathType, ref: RouteRefType) {\n    this.path = path;\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): RoutePathType {\n    return this.path;\n  }\n\n  isSegment(): boolean {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocaleType, RoutePathType, RouteRefType } from './types';\n\nexport default class LocalizedEndRoute {\n  localizedPaths: Map<LocaleType, RoutePathType>;\n  ref: RouteRefType;\n\n  constructor(localizedPaths: Map<LocaleType, RoutePathType>, ref: RouteRefType) {\n    this.localizedPaths = localizedPaths;\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale: LocaleType): ?RoutePathType {\n    return this.localizedPaths.get(locale);\n  }\n\n  isSegment(): boolean {\n    return false;\n  }\n\n  toJSON() {\n    return Array.from(this.localizedPaths.entries());\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { SegmentRoutePathType } from './types';\nimport type Route from './EndRoute';\n\nexport default class SegmentRoute {\n  path: SegmentRoutePathType;\n  // nestedRoutes: Array<Route | SegmentRoute> = []; // disable flow: can cause issues with Object.freeze\n  nestedRoutes = [];\n  defaultRoute: ?Route;\n\n  constructor(path: SegmentRoutePathType) {\n    this.path = path;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePathType {\n    return this.path;\n  }\n\n  isSegment(): boolean {\n    return true;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocaleType, SegmentRoutePathType } from './types';\nimport type LocalizedRoute from './LocalizedEndRoute';\n\nexport default class LocalizedSegmentRoute {\n  localizedPaths: Map<LocaleType, SegmentRoutePathType>;\n  nestedRoutes: Array<LocalizedRoute | LocalizedSegmentRoute> = [];\n  defaultRoute: ?LocalizedRoute;\n\n  constructor(localizedPaths: Map<LocaleType, SegmentRoutePathType>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale: LocaleType): ?SegmentRoutePathType {\n    return this.localizedPaths.get(locale);\n  }\n\n  isSegment(): boolean {\n    return true;\n  }\n\n  toJSON() {\n    return Array.from(this.localizedPaths.entries());\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import { createRoutePath, createRoutePathSegment } from './createRoutePath';\nimport type {\n  LocaleType,\n  PathDictionaryType,\n  RoutePathType,\n  SegmentRoutePathType,\n  RouteRefType,\n} from '../types';\nimport Route from './EndRoute';\nimport LocalizedRoute from './LocalizedEndRoute';\nimport SegmentRoute from './SegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nconst createLocalizedPaths = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  segment: boolean,\n) => {\n  const localizedPaths = new Map();\n  Object.keys(pathDictionary).forEach((locale: LocaleType) => {\n    const path = pathDictionary[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePathType = createRoutePathSegment(\n        path,\n        completePathDictionary[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    } else {\n      const routerPath: RoutePathType = createRoutePath(path, completePathDictionary[locale]);\n      localizedPaths.set(locale, routerPath);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: any) => {\n  if (!ref) throw new Error(`Invalid ref: \"${ref}\"`);\n};\n\nexport const createRoute = (path: string, completePath: string, ref: RouteRefType): Route => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: RoutePathType = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  ref: RouteRefType,\n): LocalizedRoute => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, false);\n  return new LocalizedRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (path: string, completePath: string): SegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new SegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n): LocalizedSegmentRoute => {\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, true);\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import Logger from 'nightingale-logger';\nimport type {\n  RoutesType,\n  LocaleType,\n  RouteMatchType,\n  SegmentRoutePathType,\n  RoutePathType,\n} from '../types';\nimport type { RouteType } from '../routes/index';\n\nconst logger = !PRODUCTION && new Logger('router-segments:findMatch');\n\nconst parseOtherParams = (wildcard: string) => (wildcard ? wildcard.split('/') : []);\n\nconst findMatch = (\n  path: string,\n  completePath: string,\n  routes: RoutesType,\n  locale: LocaleType,\n  namedParams: ?Map<string, string>,\n): ?RouteMatchType => {\n  let result = null;\n\n  routes.some((route: RouteType) => {\n    const routePath: ?SegmentRoutePathType | RoutePathType = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION) logger.debug(`trying ${routePath.regExp}`);\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length !== 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string) => {\n        namedParams.set(paramName, match[group++]);\n      });\n    }\n\n    if (route.isSegment()) {\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = findMatch(\n          `/${restOfThePath}`,\n          completePath,\n          route.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!route.defaultRoute) {\n        return false;\n      }\n\n      route = route.defaultRoute;\n    }\n\n    const otherParams = group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      ref: route.ref,\n      path: completePath,\n      route,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default (path: string, routes: RoutesType, locale: LocaleType = 'en'): ?RouteMatchType =>\n  findMatch(path, path, routes, locale);\n","import type { RoutesType, RouteMapType, RouterType, RouteMatchType } from '../types';\nimport type { EndRouteType } from '../routes';\nimport findMatch from './findMatch';\n\nexport default (routes: RoutesType, routeMap: RouteMapType): RouterType => {\n  const getRequiredRoute = (routeKey: string) => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: (key: string): ?EndRouteType => getRequiredRoute(key),\n    find: (path: string, locale: ?string): ?RouteMatchType => findMatch(path, routes, locale),\n    toPath: (key: string, args: any): string =>\n      getRequiredRoute(key)\n        .getPath()\n        .toPath(args),\n    toLocalizedPath: (locale: string, key: string, args: any): string =>\n      getRequiredRoute(key)\n        .getPath(locale)\n        .toPath(args),\n  };\n};\n","import type { SegmentRouteType } from '../routes/index';\nimport type {\n  RouteType,\n  PathDictionaryType,\n  RouteRefType,\n  SegmentRouterBuilderType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\n\ntype AddToRouteMapType = (key: string, route: RouteType) => void;\nexport default (defaultLocale: ?string, addToRouteMap: AddToRouteMapType) => {\n  const createSegmentRouterBuilder = (segmentRoute: SegmentRouteType) => {\n    const getCompletePath = path => segmentRoute.path.completePath + path;\n    const getCompleteLocalizedPaths = (localizedPaths: PathDictionaryType): PathDictionaryType => {\n      const completeLocalizedPaths = {};\n\n      const getCompletePathForLocale = !segmentRoute.localizedPaths\n        ? (path, locale) => `${segmentRoute.path.completePath}${path}`\n        : (path, locale) => `${segmentRoute.localizedPaths.get(locale).completePath}${path}`;\n\n      Object.keys(localizedPaths).forEach((locale: string) => {\n        completeLocalizedPaths[locale] = getCompletePathForLocale(localizedPaths[locale], locale);\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (path: string) => {\n      const localizedPaths = {};\n      Array.from(segmentRoute.localizedPaths.keys()).forEach(\n        locale => (localizedPaths[locale] = path),\n      );\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: PathDictionaryType,\n      ref: RouteRefType,\n      key: ?string,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale];\n      const route = createLocalizedRoute(localizedPaths, completeLocalizedPaths, ref);\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (path: string, ref: RouteRefType, key: ?string) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedEndRoute(createLocalizedPathFromSegment(path), ref, key);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: PathDictionaryType,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(localizedPaths, completeLocalizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedSegmentRoute(createLocalizedPathFromSegment(path), buildSegment);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRefType, key: ?string) => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRefType, key: ?string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedEndRoute(localizedPaths, ref, key));\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: PathDictionaryType,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedSegmentRoute(localizedPaths, buildSegment));\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n};\n","import type {\n  LocaleType,\n  RouterBuilderType,\n  PathDictionaryType,\n  RoutesType,\n  RouteMapType,\n  RouteType,\n  SegmentRouterBuilderType,\n  RouteRefType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter from '../router/createRouter';\nimport createSegmentRouterBuilderCreator from './createSegmentRouterBuilderCreator';\n\nexport default (locales: ?Array<LocaleType>): RouterBuilderType => {\n  const defaultLocale = locales && locales[0];\n  const routes: RoutesType = [];\n  const routeMap: RouteMapType = new Map();\n\n  const addToRouteMap = (key: string, route: RouteType) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRefType, key: ?string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (path: string, buildSegment: (builder: SegmentRouterBuilderType) => void): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: PathDictionaryType,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n};\n"],"names":["internalCreateRoutePath","path","completePath","segment","keys","regExp","pathToRegExp","namedParams","map","key","name","filter","Boolean","compile","createRoutePathSegment","createRoutePath","EndRoute","ref","JSON","stringify","toJSON","LocalizedEndRoute","localizedPaths","freeze","locale","get","Array","from","entries","SegmentRoute","nestedRoutes","LocalizedSegmentRoute","createLocalizedPaths","pathDictionary","completePathDictionary","Map","forEach","routerPath","set","createRoute","routePath","Route","createLocalizedRoute","LocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","parseOtherParams","wildcard","split","findMatch","routes","result","some","route","getPath","match","exec","shift","groupCount","length","group","paramName","isSegment","restOfThePath","defaultRoute","otherParams","undefined","Object","routeMap","getRequiredRoute","routeKey","Error","args","toPath","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","getCompletePathForLocale","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","push","locales","has","createSegmentRouterBuilderCreator","createRouter"],"mappings":"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"}