{"version":3,"file":"index-browsermodern.es.js","sources":["../src/router/findMatch.ts","../src/router/createRouter.ts","../src/utils/getKeys.ts","../src/routes/LocalizedEndRoute.ts","../src/routes/LocalizedSegmentRoute.ts","../src/routes/NotLocalizedEndRoute.ts","../src/routes/NotLocalizedSegmentRoute.ts","../src/routes/createRoutePath.ts","../src/routes/create.ts","../src/builder/createSegmentRouterBuilderCreator.ts","../src/builder/createRouterBuilder.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { Logger } from 'nightingale-logger';\nimport type { EndRoute, Route, SegmentRoute } from '../routes/interfaces';\nimport type {\n  LocaleType,\n  RoutePathInterface,\n  RouteRef,\n  SegmentRoutePath,\n  EndRoutePath,\n} from '../types';\n\nexport interface RouteMatch<Locales extends LocaleType | never = any> {\n  namedParams: Map<string, string> | undefined;\n  otherParams: string[] | undefined;\n  path: string;\n  ref: RouteRef;\n  route: Route<any, Locales>;\n  routePath: EndRoutePath | SegmentRoutePath;\n}\n\nconst logger = __DEV__ ? new Logger('router-segments:findMatch') : undefined;\n\nconst parseOtherParams = (wildcard: string): string[] =>\n  wildcard ? wildcard.split('/') : [];\n\nconst internalFindMatch = <Locales extends LocaleType>(\n  path: string,\n  completePath: string,\n  routes: Route<RoutePathInterface, Locales>[],\n  locale: Locales = 'en' as Locales,\n  namedParams?: Map<number | string, string>,\n): RouteMatch<Locales> | null => {\n  let result = null;\n\n  routes.some((route): boolean => {\n    const routePath: RoutePathInterface = route.getPath(locale);\n\n    if (__DEV__ && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (__DEV__ && logger) {\n      logger.debug(`trying ${routePath.regExp.toString()}`);\n    }\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length > 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: number | string) => {\n        namedParams!.set(paramName, match[group++]);\n      });\n    }\n\n    if (route.isSegment()) {\n      const segment = route as SegmentRoute;\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = internalFindMatch(\n          `/${restOfThePath}`,\n          completePath,\n          segment.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!segment.defaultRoute) {\n        return false;\n      }\n\n      route = segment.defaultRoute;\n    }\n\n    const endRoute = route as EndRoute;\n\n    const otherParams =\n      group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ref: endRoute.ref,\n      path: completePath,\n      route: endRoute,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport function findMatch<Locales extends LocaleType>(\n  path: string,\n  routes: Route<RoutePathInterface, Locales>[],\n  locale?: Locales,\n): RouteMatch<Locales> | null {\n  return internalFindMatch(path, path, routes, locale);\n}\n","import type { EndRoute } from '../routes/interfaces';\nimport type { Routes, RouteMap, LocaleType } from '../types';\nimport type { RouteMatch } from './findMatch';\nimport { findMatch } from './findMatch';\n\nexport interface Router<Locales extends LocaleType | never = any> {\n  get: (key: string) => EndRoute<Locales>;\n  find: (path: string, locale?: Locales) => RouteMatch<Locales> | null;\n  toLocalizedPath: (locale: Locales, key: string, args?: any) => string;\n  toPath: (key: string, args?: any) => string;\n}\n\nexport function createRouter<Locales extends LocaleType | never>(\n  routes: Routes<Locales>,\n  routeMap: RouteMap<Locales>,\n): Router<Locales> {\n  const getRequiredRoute = (routeKey: string): EndRoute<Locales> => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: getRequiredRoute,\n    find: (path: string, locale?: Locales): RouteMatch<Locales> | null =>\n      findMatch(path, routes, locale),\n    toPath: (key: string, args?: Record<string, any>): string =>\n      getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (\n      locale: Locales,\n      key: string,\n      args?: Record<string, any>,\n    ): string => getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n}\n","export const getKeys = <T extends Record<string, unknown>>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import type { EndRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, EndRoutePath, RouteRef } from './types';\n\nexport class LocalizedEndRoute<Locales extends LocaleType>\n  implements EndRoute<Locales>, LocalizedRoute<EndRoutePath, Locales>\n{\n  localizedPaths: Map<LocaleType, EndRoutePath>;\n\n  ref: RouteRef;\n\n  constructor(localizedPaths: Map<LocaleType, EndRoutePath>, ref: RouteRef) {\n    this.localizedPaths = localizedPaths;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale?: Locales): EndRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale)!;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocalizedEndRoute } from './LocalizedEndRoute';\nimport type { SegmentRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, SegmentRoutePath } from './types';\n\nexport class LocalizedSegmentRoute<Locales extends LocaleType>\n  implements SegmentRoute<Locales>, LocalizedRoute<SegmentRoutePath, Locales>\n{\n  localizedPaths: Map<Locales, SegmentRoutePath>;\n\n  nestedRoutes: LocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: LocalizedEndRoute<Locales> | undefined;\n\n  constructor(localizedPaths: Map<Locales, SegmentRoutePath>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale?: Locales): SegmentRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale)!;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { EndRoute, NotLocalizedRoute } from './interfaces';\nimport type { EndRoutePath, LocaleType, RouteRef } from './types';\n\nexport class NotLocalizedEndRoute<Locales extends LocaleType = LocaleType>\n  implements EndRoute<Locales>, NotLocalizedRoute<EndRoutePath, Locales>\n{\n  path: EndRoutePath;\n\n  ref: RouteRef;\n\n  constructor(path: EndRoutePath, ref: RouteRef) {\n    this.path = path;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): EndRoutePath {\n    return this.path;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { NotLocalizedEndRoute } from './NotLocalizedEndRoute';\nimport type { SegmentRoute, NotLocalizedRoute } from './interfaces';\nimport type { LocaleType, SegmentRoutePath } from './types';\n\nexport class NotLocalizedSegmentRoute<Locales extends LocaleType = LocaleType>\n  implements\n    SegmentRoute<Locales>,\n    NotLocalizedRoute<SegmentRoutePath, Locales>\n{\n  path: SegmentRoutePath;\n\n  nestedRoutes: NotLocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: NotLocalizedEndRoute | undefined;\n\n  constructor(path: SegmentRoutePath) {\n    this.path = path;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePath {\n    return this.path;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { Key } from 'path-to-regexp';\nimport pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePath, EndRoutePath } from '../types';\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: true,\n): SegmentRoutePath;\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: false,\n): EndRoutePath;\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: boolean,\n): EndRoutePath | SegmentRoutePath {\n  const keys: Key[] = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map((key) => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n}\n\nexport const createRoutePathSegment = (\n  path: string,\n  completePath: string,\n): SegmentRoutePath => internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (\n  path: string,\n  completePath: string,\n): EndRoutePath => internalCreateRoutePath(path, completePath, false);\n","import type {\n  LocaleType,\n  LocalizedPathsRecord,\n  EndRoutePath,\n  SegmentRoutePath,\n  RouteRef,\n} from '../types';\nimport { getKeys } from '../utils/getKeys';\nimport { LocalizedEndRoute } from './LocalizedEndRoute';\nimport { LocalizedSegmentRoute } from './LocalizedSegmentRoute';\nimport { NotLocalizedEndRoute as Route } from './NotLocalizedEndRoute';\nimport { NotLocalizedSegmentRoute } from './NotLocalizedSegmentRoute';\nimport { createRoutePath, createRoutePathSegment } from './createRoutePath';\n\nconst createLocalizedPaths = <\n  Locales extends LocaleType,\n  Path extends EndRoutePath | SegmentRoutePath,\n>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  segment: boolean,\n): Map<Locales, Path> => {\n  const localizedPaths = new Map<Locales, Path>();\n  getKeys(localizedPathsRecord).forEach((locale: Locales) => {\n    const path = localizedPathsRecord[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePath = createRoutePathSegment(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    } else {\n      const routerPath: EndRoutePath = createRoutePath(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: RouteRef): void => {\n  if (!ref) throw new Error(`Invalid ref: \"${JSON.stringify(ref)}\"`);\n};\n\nexport const createRoute = (\n  path: string,\n  completePath: string,\n  ref: RouteRef,\n): Route => {\n  /* istanbul ignore if */\n  if (__DEV__) checkRef(ref);\n  const routePath: EndRoutePath = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  ref: RouteRef,\n): LocalizedEndRoute<Locales> => {\n  /* istanbul ignore if */\n  if (__DEV__) checkRef(ref);\n  const localizedPaths = createLocalizedPaths<Locales, EndRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    false,\n  );\n  return new LocalizedEndRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (\n  path: string,\n  completePath: string,\n): NotLocalizedSegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new NotLocalizedSegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n): LocalizedSegmentRoute<Locales> => {\n  const localizedPaths = createLocalizedPaths<Locales, SegmentRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    true,\n  );\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import type { LocalizedSegmentRoute, LocalizedEndRoute } from '../routes';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute, SegmentRoute } from '../routes/interfaces';\nimport type { LocalizedPathsRecord, RouteRef, LocaleType } from '../types';\nimport { getKeys } from '../utils/getKeys';\n\nexport interface SegmentRouterBuilder<Locales extends LocaleType> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  defaultRoute: (ref: RouteRef, key?: string) => void;\n}\n\nexport function createSegmentRouterBuilderCreator<Locales extends LocaleType>(\n  defaultLocale: Locales | undefined,\n  addToRouteMap: (key: string, route: EndRoute<Locales>) => void,\n): (segmentRoute: SegmentRoute<Locales>) => SegmentRouterBuilder<Locales> {\n  const createSegmentRouterBuilder = (\n    segmentRoute: SegmentRoute<Locales>,\n  ): SegmentRouterBuilder<Locales> => {\n    const getCompletePath = (path: string, locale?: Locales): string =>\n      `${segmentRoute.getPath(locale).completePath}${path}`;\n\n    const getCompleteLocalizedPaths = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n    ): LocalizedPathsRecord<Locales> => {\n      const completeLocalizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n\n      getKeys(localizedPaths).forEach((locale: Locales) => {\n        completeLocalizedPaths[locale] = getCompletePath(\n          localizedPaths[locale],\n          locale,\n        );\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      segmentRoute: LocalizedSegmentRoute<Locales>,\n      path: string,\n    ): Record<Locales, string> => {\n      const localizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n      [...segmentRoute.localizedPaths.keys()].forEach((locale) => {\n        localizedPaths[locale] = path;\n      });\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): LocalizedEndRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale!];\n      const route = createLocalizedRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n        ref,\n      );\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (\n      path: string,\n      ref: RouteRef,\n      key?: string,\n    ): EndRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedEndRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          ref,\n          key,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): LocalizedSegmentRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n      );\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): SegmentRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedSegmentRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          buildSegment,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRef, key?: string): void => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRef, key?: string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        ref: RouteRef,\n        key?: string,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedEndRoute(localizedPaths, ref, key),\n        );\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedSegmentRoute(localizedPaths, buildSegment),\n        );\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n}\n","import type { Router } from '../router/createRouter';\nimport { createRouter } from '../router/createRouter';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute } from '../routes/interfaces';\nimport type {\n  LocaleType,\n  LocalizedPathsRecord,\n  Routes,\n  RouteMap,\n  RouteRef,\n} from '../types';\nimport type { SegmentRouterBuilder } from './createSegmentRouterBuilderCreator';\nimport { createSegmentRouterBuilderCreator } from './createSegmentRouterBuilderCreator';\n\nexport interface RouterBuilder<Locales extends LocaleType | never> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  createRouter: () => Router<Locales>;\n  getRoutes: () => Routes<Locales>;\n}\n\nexport function createRouterBuilder<Locales extends LocaleType>(\n  locales?: Locales[],\n): RouterBuilder<Locales> {\n  const defaultLocale = locales?.[0];\n  const routes: Routes<Locales> = [];\n  const routeMap: RouteMap<Locales> = new Map<string, EndRoute<Locales>>();\n\n  const addToRouteMap = (key: string, route: EndRoute<Locales>): void => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRef, key?: string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n}\n"],"names":["logger","__DEV__","Logger","undefined","parseOtherParams","wildcard","split","internalFindMatch","path","completePath","routes","locale","namedParams","result","some","route","routePath","getPath","Error","debug","regExp","toString","match","exec","shift","groupCount","length","group","Map","forEach","paramName","set","isSegment","segment","restOfThePath","nestedRoutes","defaultRoute","endRoute","otherParams","Object","freeze","ref","findMatch","createRouter","routeMap","getRequiredRoute","routeKey","get","find","toPath","key","args","toLocalizedPath","getKeys","o","keys","LocalizedEndRoute","constructor","localizedPaths","isLocalized","toJSON","entries","JSON","stringify","LocalizedSegmentRoute","NotLocalizedEndRoute","NotLocalizedSegmentRoute","internalCreateRoutePath","pathToRegExp","sensitive","strict","map","name","filter","Boolean","compile","createRoutePathSegment","createRoutePath","createLocalizedPaths","localizedPathsRecord","completeLocalizedPathsRecord","routerPath","checkRef","createRoute","Route","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","createSegmentRouterBuilderCreator","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","add","push","addLocalized","addSegment","addLocalizedSegment","createRouterBuilder","locales","has","getRoutes"],"mappings":"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"}