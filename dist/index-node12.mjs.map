{"version":3,"file":"index-node12.mjs","sources":["../src/router/findMatch.ts","../src/router/createRouter.ts","../src/utils/getKeys.ts","../src/routes/LocalizedEndRoute.ts","../src/routes/LocalizedSegmentRoute.ts","../src/routes/NotLocalizedEndRoute.ts","../src/routes/NotLocalizedSegmentRoute.ts","../src/routes/createRoutePath.ts","../src/routes/create.ts","../src/builder/createSegmentRouterBuilderCreator.ts","../src/builder/createRouterBuilder.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { PRODUCTION } from 'pob-babel';\nimport Logger from 'nightingale-logger';\nimport type { EndRoute, Route, SegmentRoute } from '../routes/interfaces';\nimport type {\n  Routes,\n  LocaleType,\n  RoutePathInterface,\n  RouteRef,\n  SegmentRoutePath,\n  EndRoutePath,\n} from '../types';\n\nexport interface RouteMatch<Locales extends LocaleType | never> {\n  namedParams: undefined | Map<string, string>;\n  otherParams: undefined | string[];\n  path: string;\n  ref: RouteRef;\n  route: Route<any, Locales>;\n  routePath: SegmentRoutePath | EndRoutePath;\n}\n\nconst logger = !PRODUCTION\n  ? new Logger('router-segments:findMatch')\n  : undefined;\n\nconst parseOtherParams = (wildcard: string): string[] =>\n  wildcard ? wildcard.split('/') : [];\n\nconst internalFindMatch = <Locales extends LocaleType>(\n  path: string,\n  completePath: string,\n  routes: Routes<Locales>,\n  locale: Locales = 'en' as Locales,\n  namedParams?: Map<string | number, string>,\n): null | RouteMatch<Locales> => {\n  let result = null;\n\n  routes.some((route): boolean => {\n    const routePath: RoutePathInterface = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION && logger) {\n      logger.debug(`trying ${routePath.regExp.toString()}`);\n    }\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length > 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string | number) => {\n        (namedParams as Map<string | number, string>).set(\n          paramName,\n          match[group++],\n        );\n      });\n    }\n\n    if (route.isSegment()) {\n      const segment = route as SegmentRoute;\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = internalFindMatch(\n          `/${restOfThePath}`,\n          completePath,\n          segment.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!segment.defaultRoute) {\n        return false;\n      }\n\n      route = segment.defaultRoute;\n    }\n\n    const endRoute = route as EndRoute;\n\n    const otherParams =\n      group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      ref: endRoute.ref,\n      path: completePath,\n      route: endRoute,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default function findMatch<Locales extends LocaleType>(\n  path: string,\n  routes: Routes<Locales>,\n  locale?: Locales,\n): null | RouteMatch<Locales> {\n  return internalFindMatch(path, path, routes, locale);\n}\n","import type { EndRoute } from '../routes/interfaces';\nimport type { Routes, RouteMap, LocaleType } from '../types';\nimport type { RouteMatch } from './findMatch';\nimport findMatch from './findMatch';\n\nexport interface Router<Locales extends LocaleType | never> {\n  get: (key: string) => EndRoute<Locales>;\n  find: (path: string, locale?: Locales) => null | RouteMatch<Locales>;\n  toLocalizedPath: (locale: Locales, key: string, args?: any) => string;\n  toPath: (key: string, args?: any) => string;\n}\n\nexport default function createRouter<Locales extends LocaleType | never>(\n  routes: Routes<Locales>,\n  routeMap: RouteMap<Locales>,\n): Router<Locales> {\n  const getRequiredRoute = (routeKey: string): EndRoute<Locales> => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: getRequiredRoute,\n    find: (path: string, locale?: Locales): null | RouteMatch<Locales> =>\n      findMatch(path, routes, locale),\n    toPath: (key: string, args?: any): string =>\n      getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (locale: Locales, key: string, args?: any): string =>\n      getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n}\n","export const getKeys = <T extends Record<string, unknown>>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import type { EndRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, EndRoutePath, RouteRef } from './types';\n\nexport default class LocalizedEndRoute<Locales extends LocaleType>\n  implements EndRoute<Locales>, LocalizedRoute<EndRoutePath, Locales> {\n  localizedPaths: Map<LocaleType, EndRoutePath>;\n\n  ref: RouteRef;\n\n  constructor(localizedPaths: Map<LocaleType, EndRoutePath>, ref: RouteRef) {\n    this.localizedPaths = localizedPaths;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale?: Locales): EndRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale) as EndRoutePath;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type LocalizedEndRoute from './LocalizedEndRoute';\nimport type { SegmentRoute, LocalizedRoute } from './interfaces';\nimport type { LocaleType, SegmentRoutePath } from './types';\n\nexport default class LocalizedSegmentRoute<Locales extends LocaleType>\n  implements SegmentRoute<Locales>, LocalizedRoute<SegmentRoutePath, Locales> {\n  localizedPaths: Map<Locales, SegmentRoutePath>;\n\n  nestedRoutes: LocalizedRoute<any, Locales>[] = [];\n\n  defaultRoute: undefined | LocalizedEndRoute<Locales>;\n\n  constructor(localizedPaths: Map<Locales, SegmentRoutePath>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale?: Locales): SegmentRoutePath {\n    if (!locale) throw new Error('Missing locale');\n    return this.localizedPaths.get(locale) as SegmentRoutePath;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): true {\n    return true;\n  }\n\n  toJSON(): unknown[] {\n    return [...this.localizedPaths.entries()];\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { EndRoute, NotLocalizedRoute } from './interfaces';\nimport type { EndRoutePath, RouteRef } from './types';\n\nexport default class NotLocalizedEndRoute\n  implements EndRoute, NotLocalizedRoute<EndRoutePath> {\n  path: EndRoutePath;\n\n  ref: RouteRef;\n\n  constructor(path: EndRoutePath, ref: RouteRef) {\n    this.path = path;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): EndRoutePath {\n    return this.path;\n  }\n\n  isSegment(): false {\n    return false;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type NotLocalizedEndRoute from './NotLocalizedEndRoute';\nimport type { SegmentRoute, NotLocalizedRoute } from './interfaces';\nimport type { SegmentRoutePath } from './types';\n\nexport default class NotLocalizedSegmentRoute\n  implements SegmentRoute, NotLocalizedRoute<SegmentRoutePath> {\n  path: SegmentRoutePath;\n\n  nestedRoutes: NotLocalizedRoute<any>[] = [];\n\n  defaultRoute: undefined | NotLocalizedEndRoute;\n\n  constructor(path: SegmentRoutePath) {\n    this.path = path;\n  }\n\n  freeze(): void {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePath {\n    return this.path;\n  }\n\n  isSegment(): true {\n    return true;\n  }\n\n  isLocalized(): false {\n    return false;\n  }\n\n  toJSON(): unknown {\n    return this.path;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { Key } from 'path-to-regexp';\nimport pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePath, EndRoutePath } from '../types';\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: true,\n): SegmentRoutePath;\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: false,\n): EndRoutePath;\n\nfunction internalCreateRoutePath(\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePath | EndRoutePath {\n  const keys: Key[] = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map((key) => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n}\n\nexport const createRoutePathSegment = (\n  path: string,\n  completePath: string,\n): SegmentRoutePath => internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (\n  path: string,\n  completePath: string,\n): EndRoutePath => internalCreateRoutePath(path, completePath, false);\n","import { PRODUCTION } from 'pob-babel';\nimport type {\n  LocaleType,\n  LocalizedPathsRecord,\n  EndRoutePath,\n  SegmentRoutePath,\n  RouteRef,\n} from '../types';\nimport { getKeys } from '../utils/getKeys';\nimport LocalizedEndRoute from './LocalizedEndRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\nimport Route from './NotLocalizedEndRoute';\nimport NotLocalizedSegmentRoute from './NotLocalizedSegmentRoute';\nimport { createRoutePath, createRoutePathSegment } from './createRoutePath';\n\nconst createLocalizedPaths = <\n  Locales extends LocaleType,\n  Path extends SegmentRoutePath | EndRoutePath\n>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  segment: boolean,\n): Map<Locales, Path> => {\n  const localizedPaths = new Map<Locales, Path>();\n  getKeys(localizedPathsRecord).forEach((locale: Locales) => {\n    const path = localizedPathsRecord[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePath = createRoutePathSegment(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    } else {\n      const routerPath: EndRoutePath = createRoutePath(\n        path,\n        completeLocalizedPathsRecord[locale],\n      );\n      localizedPaths.set(locale, routerPath as Path);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: RouteRef): void => {\n  if (!ref) throw new Error(`Invalid ref: \"${JSON.stringify(ref)}\"`);\n};\n\nexport const createRoute = (\n  path: string,\n  completePath: string,\n  ref: RouteRef,\n): Route => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: EndRoutePath = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n  ref: RouteRef,\n): LocalizedEndRoute<Locales> => {\n  /* istanbul ignore if */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths<Locales, EndRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    false,\n  );\n  return new LocalizedEndRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (\n  path: string,\n  completePath: string,\n): NotLocalizedSegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new NotLocalizedSegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = <Locales extends LocaleType>(\n  localizedPathsRecord: LocalizedPathsRecord<Locales>,\n  completeLocalizedPathsRecord: LocalizedPathsRecord<Locales>,\n): LocalizedSegmentRoute<Locales> => {\n  const localizedPaths = createLocalizedPaths<Locales, SegmentRoutePath>(\n    localizedPathsRecord,\n    completeLocalizedPathsRecord,\n    true,\n  );\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import type { LocalizedSegmentRoute, LocalizedEndRoute } from '../routes';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute, SegmentRoute } from '../routes/interfaces';\nimport type { LocalizedPathsRecord, RouteRef, LocaleType } from '../types';\nimport { getKeys } from '../utils/getKeys';\n\nexport interface SegmentRouterBuilder<Locales extends LocaleType> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  defaultRoute: (ref: RouteRef, key?: string) => void;\n}\n\nexport default function createSegmentRouterBuilderCreator<\n  Locales extends LocaleType\n>(\n  defaultLocale: undefined | Locales,\n  addToRouteMap: (key: string, route: EndRoute<Locales>) => void,\n): (segmentRoute: SegmentRoute<Locales>) => SegmentRouterBuilder<Locales> {\n  const createSegmentRouterBuilder = (\n    segmentRoute: SegmentRoute<Locales>,\n  ): SegmentRouterBuilder<Locales> => {\n    const getCompletePath = (path: string, locale?: Locales): string =>\n      `${segmentRoute.getPath(locale).completePath}${path}`;\n\n    const getCompleteLocalizedPaths = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n    ): LocalizedPathsRecord<Locales> => {\n      const completeLocalizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n\n      getKeys(localizedPaths).forEach((locale: Locales) => {\n        completeLocalizedPaths[locale] = getCompletePath(\n          localizedPaths[locale],\n          locale,\n        );\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (\n      segmentRoute: LocalizedSegmentRoute<Locales>,\n      path: string,\n    ): Record<Locales, string> => {\n      const localizedPaths: Record<Locales, string> = {} as Record<\n        Locales,\n        string\n      >;\n      [...segmentRoute.localizedPaths.keys()].forEach((locale) => {\n        localizedPaths[locale] = path;\n      });\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): LocalizedEndRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string =\n        key || completeLocalizedPaths[defaultLocale as Locales];\n      const route = createLocalizedRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n        ref,\n      );\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (\n      path: string,\n      ref: RouteRef,\n      key?: string,\n    ): EndRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedEndRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          ref,\n          key,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): LocalizedSegmentRoute<Locales> => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(\n        localizedPaths,\n        completeLocalizedPaths,\n      );\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): SegmentRoute<Locales> => {\n      if (segmentRoute.isLocalized()) {\n        return _createLocalizedSegmentRoute(\n          createLocalizedPathFromSegment(\n            segmentRoute as LocalizedSegmentRoute<Locales>,\n            path,\n          ),\n          buildSegment,\n        );\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRef, key?: string): void => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRef, key?: string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        ref: RouteRef,\n        key?: string,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedEndRoute(localizedPaths, ref, key),\n        );\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: LocalizedPathsRecord<Locales>,\n        buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(\n          _createLocalizedSegmentRoute(localizedPaths, buildSegment),\n        );\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n}\n","import type { Router } from '../router/createRouter';\nimport createRouter from '../router/createRouter';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport type { EndRoute } from '../routes/interfaces';\nimport type {\n  LocaleType,\n  LocalizedPathsRecord,\n  Routes,\n  RouteMap,\n  RouteRef,\n} from '../types';\nimport type { SegmentRouterBuilder } from './createSegmentRouterBuilderCreator';\nimport createSegmentRouterBuilderCreator from './createSegmentRouterBuilderCreator';\n\nexport interface RouterBuilder<Locales extends LocaleType | never> {\n  add: (path: string, ref: RouteRef, key?: string) => void;\n  addLocalized: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    ref: RouteRef,\n    key?: string,\n  ) => void;\n  addLocalizedSegment: (\n    localizedPaths: LocalizedPathsRecord<Locales>,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  addSegment: (\n    path: string,\n    buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n  ) => void;\n  createRouter: () => Router<Locales>;\n  getRoutes: () => Routes<Locales>;\n}\n\nexport default function createRouterBuilder<Locales extends LocaleType>(\n  locales?: Locales[],\n): RouterBuilder<Locales> {\n  const defaultLocale = locales?.[0];\n  const routes: Routes<Locales> = [];\n  const routeMap: RouteMap<Locales> = new Map<string, EndRoute<Locales>>();\n\n  const addToRouteMap = (key: string, route: EndRoute<Locales>): void => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRef, key?: string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      ref: RouteRef,\n      key?: string,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: LocalizedPathsRecord<Locales>,\n      buildSegment: (builder: SegmentRouterBuilder<Locales>) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n}\n"],"names":["parseOtherParams","wildcard","split","internalFindMatch","path","completePath","routes","locale","namedParams","result","some","route","routePath","getPath","match","regExp","exec","shift","groupCount","length","group","Map","forEach","paramName","set","isSegment","segment","restOfThePath","nestedRoutes","defaultRoute","endRoute","otherParams","undefined","Object","freeze","ref","findMatch","createRouter","routeMap","getRequiredRoute","routeKey","get","Error","find","toPath","key","args","toLocalizedPath","getKeys","o","keys","LocalizedEndRoute","constructor","localizedPaths","isLocalized","toJSON","entries","toString","JSON","stringify","LocalizedSegmentRoute","NotLocalizedEndRoute","NotLocalizedSegmentRoute","internalCreateRoutePath","pathToRegExp","sensitive","strict","map","name","filter","Boolean","compile","createRoutePathSegment","createRoutePath","createLocalizedPaths","localizedPathsRecord","completeLocalizedPathsRecord","routerPath","createRoute","Route","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","createSegmentRouterBuilderCreator","defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","getCompleteLocalizedPaths","completeLocalizedPaths","createLocalizedPathFromSegment","_createLocalizedEndRoute","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","_createSegmentRoute","add","push","addLocalized","addSegment","addLocalizedSegment","createRouterBuilder","locales","has","getRoutes"],"mappings":"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"}