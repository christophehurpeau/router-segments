{"version":3,"file":"index-node6-dev.cjs.js","sources":["../src/routes/types.js","../src/routes/EndRoute.js","../src/routes/LocalizedEndRoute.js","../src/routes/SegmentRoute.js","../src/routes/LocalizedSegmentRoute.js","../src/routes/index.js","../src/types.js","../src/routes/createRoutePath.js","../src/routes/create.js","../src/router/findMatch.js","../src/builder/createSegmentRouterBuilderCreator.js"],"sourcesContent":["export type RouteRefType = any;\n\nexport type RoutePathType = {|\n  path: string,\n  completePath: string,\n  regExp: RegExp,\n  namedParams: Array<string>,\n  toPath: (args: Object) => string,\n|};\n\nexport type SegmentRoutePathType = {|\n  path: string,\n  completePath: string,\n  regExp: RegExp,\n  namedParams: Array<string>,\n|};\n\nexport type LocaleType = string;\n","import type { RoutePathType, RouteRefType } from './types';\n\nexport default class EndRoute {\n  path: RoutePathType;\n  ref: RouteRefType;\n\n  constructor(path: RoutePathType, ref: RouteRefType) {\n    this.path = path;\n    this.ref = ref;\n    // Object.freeze(this);\n  }\n\n  getPath(): RoutePathType {\n    return this.path;\n  }\n\n  isSegment(): boolean {\n    return false;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocaleType, RoutePathType, RouteRefType } from './types';\n\nexport default class LocalizedEndRoute {\n  localizedPaths: Map<LocaleType, RoutePathType>;\n  ref: RouteRefType;\n\n  constructor(localizedPaths: Map<LocaleType, RoutePathType>, ref: RouteRefType) {\n    this.localizedPaths = localizedPaths;\n    this.ref = ref;\n    Object.freeze(this);\n  }\n\n  getPath(locale: LocaleType): ?RoutePathType {\n    return this.localizedPaths.get(locale);\n  }\n\n  isSegment(): boolean {\n    return false;\n  }\n\n  toJSON() {\n    return Array.from(this.localizedPaths.entries());\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { SegmentRoutePathType } from './types';\nimport type Route from './EndRoute';\n\nexport default class SegmentRoute {\n  path: SegmentRoutePathType;\n  // nestedRoutes: Array<Route | SegmentRoute> = []; // disable flow: can cause issues with Object.freeze\n  nestedRoutes = [];\n  defaultRoute: ?Route;\n\n  constructor(path: SegmentRoutePathType) {\n    this.path = path;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(): SegmentRoutePathType {\n    return this.path;\n  }\n\n  isSegment(): boolean {\n    return true;\n  }\n\n  toJSON() {\n    return this.path;\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import type { LocaleType, SegmentRoutePathType } from './types';\nimport type LocalizedRoute from './LocalizedEndRoute';\n\nexport default class LocalizedSegmentRoute {\n  localizedPaths: Map<LocaleType, SegmentRoutePathType>;\n  nestedRoutes: Array<LocalizedRoute | LocalizedSegmentRoute> = [];\n  defaultRoute: ?LocalizedRoute;\n\n  constructor(localizedPaths: Map<LocaleType, SegmentRoutePathType>) {\n    this.localizedPaths = localizedPaths;\n  }\n\n  freeze() {\n    Object.freeze(this);\n    Object.freeze(this.nestedRoutes);\n  }\n\n  getPath(locale: LocaleType): ?SegmentRoutePathType {\n    return this.localizedPaths.get(locale);\n  }\n\n  isSegment(): boolean {\n    return true;\n  }\n\n  toJSON() {\n    return Array.from(this.localizedPaths.entries());\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import EndRoute from './EndRoute';\nimport LocalizedEndRoute from './LocalizedEndRoute';\nimport SegmentRoute from './SegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nexport type RouteType = EndRoute | LocalizedEndRoute | SegmentRoute | LocalizedSegmentRoute;\nexport type SegmentRouteType = SegmentRoute | LocalizedSegmentRoute;\nexport type EndRouteType = EndRoute | LocalizedEndRoute;\n\nexport { EndRoute, LocalizedEndRoute, SegmentRoute, LocalizedSegmentRoute };\n","import type { RouteType, EndRouteType } from './routes';\nimport type { RouteRefType, RoutePathType, SegmentRoutePathType, LocaleType } from './routes/types';\n\nexport type { RouteType, RouteRefType, RoutePathType, SegmentRoutePathType, LocaleType };\n\nexport type PathDictionaryType = { [LocaleType]: string };\n\nexport type SegmentRouterBuilderType = {|\n  defaultRoute: (ref: RouteRefType, key: ?string) => void,\n  add: (path: string, ref: RouteRefType, key: ?string) => void,\n  addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string) => void,\n  addSegment: (path: string, buildSegment: (builder: SegmentRouterBuilderType) => void) => void,\n  addLocalizedSegment: (\n    localizedPaths: PathDictionaryType,\n    buildSegment: (builder: SegmentRouterBuilderType) => void,\n  ) => void,\n|};\n\n// export type SegmentCallbackType = (builder: SegmentRouterBuilderType) => void;\n\nexport type RoutesType = Array<RouteType>;\nexport type RouteMapType = Map<string, RouteType>;\n\nexport type RouteMatchType = {|\n  ref: RouteRefType,\n  path: string,\n  route: RouteType,\n  routePath: SegmentRoutePathType | RoutePathType,\n  namedParams: ?Map<string, string>,\n  otherParams: ?Array<string>,\n|};\n\nexport type RouterType = {|\n  get: (key: string) => ?EndRouteType,\n  find: (path: string, locale: ?string) => ?RouteMatchType,\n  toPath: (key: string, args: any) => string,\n  toLocalizedPath: (locale: string, key: string, args: any) => string,\n|};\n\nexport type RouterBuilderType = {|\n  add: (path: string, ref: RouteRefType, key: ?string) => void,\n  addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string) => void,\n  addSegment: (path: string, buildSegment: (builder: SegmentRouterBuilderType) => void) => void,\n  addLocalizedSegment: (\n    localizedPaths: PathDictionaryType,\n    buildSegment: (builder: SegmentRouterBuilderType) => void,\n  ) => void,\n  getRoutes: () => RoutesType,\n  createRouter: () => RouterType,\n|};\n","import pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePathType, RoutePathType } from '../types';\n\nconst internalCreateRoutePath = (\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePathType | RoutePathType => {\n  const keys = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map(key => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n};\n\nexport const createRoutePathSegment = (path: string, completePath: string): SegmentRoutePathType =>\n  internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (path: string, completePath: string): RoutePathType =>\n  internalCreateRoutePath(path, completePath, false);\n","import { createRoutePath, createRoutePathSegment } from './createRoutePath';\nimport type {\n  LocaleType,\n  PathDictionaryType,\n  RoutePathType,\n  SegmentRoutePathType,\n  RouteRefType,\n} from '../types';\nimport Route from './EndRoute';\nimport LocalizedRoute from './LocalizedEndRoute';\nimport SegmentRoute from './SegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nconst createLocalizedPaths = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  segment: boolean,\n) => {\n  const localizedPaths = new Map();\n  Object.keys(pathDictionary).forEach((locale: LocaleType) => {\n    const path = pathDictionary[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePathType = createRoutePathSegment(\n        path,\n        completePathDictionary[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    } else {\n      const routerPath: RoutePathType = createRoutePath(path, completePathDictionary[locale]);\n      localizedPaths.set(locale, routerPath);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: any) => {\n  if (!ref) throw new Error(`Invalid ref: \"${ref}\"`);\n};\n\nexport const createRoute = (path: string, completePath: string, ref: RouteRefType): Route => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: RoutePathType = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  ref: RouteRefType,\n): LocalizedRoute => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, false);\n  return new LocalizedRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (path: string, completePath: string): SegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new SegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n): LocalizedSegmentRoute => {\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, true);\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n","import Logger from 'nightingale-logger';\nimport type {\n  RoutesType,\n  LocaleType,\n  RouteMatchType,\n  SegmentRoutePathType,\n  RoutePathType,\n} from '../types';\nimport type { RouteType } from '../routes/index';\n\nconst logger = !PRODUCTION && new Logger('router-segments:findMatch');\n\nconst parseOtherParams = (wildcard: string) => (wildcard ? wildcard.split('/') : []);\n\nconst findMatch = (\n  path: string,\n  completePath: string,\n  routes: RoutesType,\n  locale: LocaleType,\n  namedParams: ?Map<string, string>,\n): ?RouteMatchType => {\n  let result = null;\n\n  routes.some((route: RouteType) => {\n    const routePath: ?SegmentRoutePathType | RoutePathType = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION) logger.debug(`trying ${routePath.regExp}`);\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length !== 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string) => {\n        namedParams.set(paramName, match[group++]);\n      });\n    }\n\n    if (route.isSegment()) {\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = findMatch(\n          `/${restOfThePath}`,\n          completePath,\n          route.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!route.defaultRoute) {\n        return false;\n      }\n\n      route = route.defaultRoute;\n    }\n\n    const otherParams = group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      ref: route.ref,\n      path: completePath,\n      route,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default (path: string, routes: RoutesType, locale: LocaleType = 'en'): ?RouteMatchType =>\n  findMatch(path, path, routes, locale);\n","import type { SegmentRouteType } from '../routes/index';\nimport type {\n  RouteType,\n  PathDictionaryType,\n  RouteRefType,\n  SegmentRouterBuilderType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\n\ntype AddToRouteMapType = (key: string, route: RouteType) => void;\nexport default (defaultLocale: ?string, addToRouteMap: AddToRouteMapType) => {\n  const createSegmentRouterBuilder = (segmentRoute: SegmentRouteType) => {\n    const getCompletePath = path => segmentRoute.path.completePath + path;\n    const getCompleteLocalizedPaths = (localizedPaths: PathDictionaryType): PathDictionaryType => {\n      const completeLocalizedPaths = {};\n\n      const getCompletePathForLocale = !segmentRoute.localizedPaths\n        ? (path, locale) => `${segmentRoute.path.completePath}${path}`\n        : (path, locale) => `${segmentRoute.localizedPaths.get(locale).completePath}${path}`;\n\n      Object.keys(localizedPaths).forEach((locale: string) => {\n        completeLocalizedPaths[locale] = getCompletePathForLocale(localizedPaths[locale], locale);\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (path: string) => {\n      const localizedPaths = {};\n      Array.from(segmentRoute.localizedPaths.keys()).forEach(\n        locale => (localizedPaths[locale] = path),\n      );\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: PathDictionaryType,\n      ref: RouteRefType,\n      key: ?string,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale];\n      const route = createLocalizedRoute(localizedPaths, completeLocalizedPaths, ref);\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (path: string, ref: RouteRefType, key: ?string) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedEndRoute(createLocalizedPathFromSegment(path), ref, key);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: PathDictionaryType,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(localizedPaths, completeLocalizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedSegmentRoute(createLocalizedPathFromSegment(path), buildSegment);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRefType, key: ?string) => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRefType, key: ?string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedEndRoute(localizedPaths, ref, key));\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: PathDictionaryType,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedSegmentRoute(localizedPaths, buildSegment));\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n};\n"],"names":["EndRoute","path","ref","JSON","stringify","toJSON","LocalizedEndRoute","localizedPaths","freeze","locale","get","Array","from","entries","SegmentRoute","nestedRoutes","LocalizedSegmentRoute","internalCreateRoutePath","completePath","segment","keys","regExp","pathToRegExp","namedParams","map","key","name","filter","Boolean","compile","createRoutePathSegment","createRoutePath","createLocalizedPaths","pathDictionary","completePathDictionary","Map","forEach","set","routerPath","checkRef","Error","createRoute","Route","routePath","createLocalizedRoute","LocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","logger","Logger","parseOtherParams","wildcard","split","findMatch","routes","result","some","route","getPath","debug","match","exec","shift","groupCount","length","group","paramName","isSegment","restOfThePath","defaultRoute","otherParams","undefined","Object"],"mappings":"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"}