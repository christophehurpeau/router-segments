{"version":3,"sources":["../../src/builder/createRouterBuilder.js"],"names":["locales","defaultLocale","Map","addToRouteMap","key","route","routeMap","has","Error","set","createSegmentRouterBuilder","add","path","ref","routes","push","addLocalized","localizedPaths","finalKey","addSegment","buildSegment","freeze","addLocalizedSegment","getRoutes","createRouter"],"mappings":"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","file":"createRouterBuilder.js","sourcesContent":["import type {\n  LocalesType,\n  RouterBuilderType,\n  PathDictionaryType,\n  RoutesType,\n  RouteMapType,\n  RouteType,\n  SegmentRouterBuilderType,\n  RouteRefType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter from '../router/createRouter';\nimport createSegmentRouterBuilderCreator from './createSegmentRouterBuilderCreator';\n\nexport default (locales: ?LocalesType): RouterBuilderType => {\n  const defaultLocale = locales && locales[0];\n  const routes: RoutesType = [];\n  const routeMap: RouteMapType = new Map();\n\n  const addToRouteMap = (key: string, route: RouteType) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRefType, key: ?string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPaths, localizedPaths, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPaths[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (path: string, buildSegment: (builder: SegmentRouterBuilderType) => void): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: PathDictionaryType,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n};\n"]}