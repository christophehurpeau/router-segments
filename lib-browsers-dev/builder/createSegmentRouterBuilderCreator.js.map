{"version":3,"sources":["../../src/builder/createSegmentRouterBuilderCreator.js"],"names":["defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","path","completePath","getCompleteLocalizedPaths","localizedPaths","completeLocalizedPaths","getCompletePathForLocale","locale","get","Object","keys","forEach","createLocalizedPathFromSegment","Array","from","_createLocalizedEndRoute","ref","key","route","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","freeze","_createSegmentRoute","defaultRoute","add","nestedRoutes","push","addLocalized","Error","addSegment","addLocalizedSegment"],"mappings":"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","file":"createSegmentRouterBuilderCreator.js","sourcesContent":["import type { SegmentRouteType } from '../routes/index';\nimport type {\n  RouteType,\n  PathDictionaryType,\n  RouteRefType,\n  SegmentRouterBuilderType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\n\ntype AddToRouteMapType = (key: string, route: RouteType) => void;\nexport default (defaultLocale: ?string, addToRouteMap: AddToRouteMapType) => {\n  const createSegmentRouterBuilder = (segmentRoute: SegmentRouteType) => {\n    const getCompletePath = path => segmentRoute.path.completePath + path;\n    const getCompleteLocalizedPaths = (localizedPaths: PathDictionaryType): PathDictionaryType => {\n      const completeLocalizedPaths = {};\n\n      const getCompletePathForLocale = !segmentRoute.localizedPaths\n        ? (path, locale) => `${segmentRoute.path.completePath}${path}`\n        : (path, locale) => `${segmentRoute.localizedPaths.get(locale).completePath}${path}`;\n\n      Object.keys(localizedPaths).forEach((locale: string) => {\n        completeLocalizedPaths[locale] = getCompletePathForLocale(localizedPaths[locale], locale);\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (path: string) => {\n      const localizedPaths = {};\n      Array.from(segmentRoute.localizedPaths.keys()).forEach(\n        locale => (localizedPaths[locale] = path),\n      );\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: PathDictionaryType,\n      ref: RouteRefType,\n      key: ?string,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale];\n      const route = createLocalizedRoute(localizedPaths, completeLocalizedPaths, ref);\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (path: string, ref: RouteRefType, key: ?string) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedEndRoute(createLocalizedPathFromSegment(path), ref, key);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: PathDictionaryType,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(localizedPaths, completeLocalizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (\n      path: string,\n      buildSegment: (builder: SegmentRouterBuilderType) => void,\n    ) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedSegmentRoute(createLocalizedPathFromSegment(path), buildSegment);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRefType, key: ?string) => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRefType, key: ?string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedEndRoute(localizedPaths, ref, key));\n      },\n\n      addSegment: (\n        path: string,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: PathDictionaryType,\n        buildSegment: (builder: SegmentRouterBuilderType) => void,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedSegmentRoute(localizedPaths, buildSegment));\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n};\n"]}