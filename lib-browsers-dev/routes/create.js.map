{"version":3,"sources":["../../src/routes/create.js"],"names":["createLocalizedPaths","pathDictionary","completePathDictionary","segment","localizedPaths","Map","Object","keys","forEach","locale","path","set","routerPath","checkRef","ref","Error","createRoute","completePath","routePath","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,uBAAuB,SAAvBA,oBAAuB,CAC3BC,cAD2B,EAE3BC,sBAF2B,EAG3BC,OAH2B,EAIxB;AAAA,4BAHW,6CAGX;;AAAA,oCAFmB,6CAEnB;;AAAA,qBADI,+BACJ;;AAAA;;AAAA;;AAAA;;AACH,MAAMC,iBAAiB,IAAIC,GAAJ,EAAvB;AACAC,SAAOC,IAAP,CAAYN,cAAZ,EAA4BO,OAA5B,CAAoC,UAACC,MAAD,EAAwB;AAAA,sBAAjB,qCAAiB;;AAAA;;AAC1D,QAAMC,OAAOT,eAAeQ,MAAf,CAAb;AACA,QAAIN,OAAJ,EAAa;AACX,uBAAgB,+CAAhB,QAAyC,6CACvCO,IADuC,EAEvCR,uBAAuBO,MAAvB,CAFuC,CAAzC;AAIAL,qBAAeO,GAAf,CAAmBF,MAAnB,EAA2BG,UAA3B;AACD,KAND,MAMO;AACL,wBAAgB,wCAAhB,QAAkC,sCAAgBF,IAAhB,EAAsBR,uBAAuBO,MAAvB,CAAtB,CAAlC;AACAL,qBAAeO,GAAf,CAAmBF,MAAnB,EAA2BG,WAA3B;AACD;AACF,GAZD;AAaA,SAAOR,cAAP;AACD,CApBD;;AAsBA,IAAMS,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAc;AAAA,iBAAV,2BAAU;;AAAA;;AAC7B,MAAI,CAACA,GAAL,EAAU,MAAM,IAAIC,KAAJ,oBAA2BD,GAA3B,OAAN;AACX,CAFD;;AAIO,IAAME,oCAAc,SAAdA,WAAc,CAACN,IAAD,EAAeO,YAAf,EAAqCH,GAArC,EAAkE;AAAA,kBAA7D,8BAA6D;;AAAA,0BAAvC,8BAAuC;;AAAA,kBAA1B,uCAA0B;;AAAA,iDAAT,6CAAS;;AAAA;;AAAA;;AAAA;;AAC3F;AACiBD,WAASC,GAAT;AACjB,kBAAe,wCAAf,QAAiC,sCAAgBJ,IAAhB,EAAsBO,YAAtB,CAAjC;AACA,4BAAO,uBAAUC,SAAV,EAAqBJ,GAArB,CAAP;AACD,CALM;;AAOA,IAAMK,sDAAuB,SAAvBA,oBAAuB,CAClClB,cADkC,EAElCC,sBAFkC,EAGlCY,GAHkC,EAIf;AAAA,6BAHL,6CAGK;;AAAA,qCAFG,6CAEH;;AAAA,kBADhB,uCACgB;;AAAA,kDAAlB,sDAAkB;;AAAA;;AAAA;;AAAA;;AACnB;AACiBD,WAASC,GAAT;AACjB,MAAMV,iBAAiBJ,qBAAqBC,cAArB,EAAqCC,sBAArC,EAA6D,KAA7D,CAAvB;AACA,6BAAO,gCAAmBE,cAAnB,EAAmCU,GAAnC,CAAP;AACD,CATM;;AAWA,IAAMM,kDAAqB,SAArBA,kBAAqB,CAACV,IAAD,EAAeO,YAAf,EAAsD;AAAA,mBAAjD,8BAAiD;;AAAA,2BAA3B,8BAA2B;;AAAA,kDAAhB,iDAAgB;;AAAA;;AAAA;;AACtF,MAAMC,YAAY,6CAAuBR,IAAvB,EAA6BO,YAA7B,CAAlB;AACA,6BAAO,2BAAiBC,SAAjB,CAAP;AACD,CAHM;;AAKA,IAAMG,oEAA8B,SAA9BA,2BAA8B,CACzCpB,cADyC,EAEzCC,sBAFyC,EAGf;AAAA,6BAFZ,6CAEY;;AAAA,qCADJ,6CACI;;AAAA,kDAAzB,0DAAyB;;AAAA;;AAAA;;AAC1B,MAAME,iBAAiBJ,qBAAqBC,cAArB,EAAqCC,sBAArC,EAA6D,IAA7D,CAAvB;AACA,6BAAO,oCAA0BE,cAA1B,CAAP;AACD,CANM","file":"create.js","sourcesContent":["import { createRoutePath, createRoutePathSegment } from './createRoutePath';\nimport type {\n  LocaleType,\n  PathDictionaryType,\n  RoutePathType,\n  SegmentRoutePathType,\n  RouteRefType,\n} from '../types';\nimport Route from './EndRoute';\nimport LocalizedRoute from './LocalizedEndRoute';\nimport SegmentRoute from './SegmentRoute';\nimport LocalizedSegmentRoute from './LocalizedSegmentRoute';\n\nconst createLocalizedPaths = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  segment: boolean,\n) => {\n  const localizedPaths = new Map();\n  Object.keys(pathDictionary).forEach((locale: LocaleType) => {\n    const path = pathDictionary[locale];\n    if (segment) {\n      const routerPath: SegmentRoutePathType = createRoutePathSegment(\n        path,\n        completePathDictionary[locale],\n      );\n      localizedPaths.set(locale, routerPath);\n    } else {\n      const routerPath: RoutePathType = createRoutePath(path, completePathDictionary[locale]);\n      localizedPaths.set(locale, routerPath);\n    }\n  });\n  return localizedPaths;\n};\n\nconst checkRef = (ref: any) => {\n  if (!ref) throw new Error(`Invalid ref: \"${ref}\"`);\n};\n\nexport const createRoute = (path: string, completePath: string, ref: RouteRefType): Route => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const routePath: RoutePathType = createRoutePath(path, completePath);\n  return new Route(routePath, ref);\n};\n\nexport const createLocalizedRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n  ref: RouteRefType,\n): LocalizedRoute => {\n  /* istanbul ignore else */\n  if (!PRODUCTION) checkRef(ref);\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, false);\n  return new LocalizedRoute(localizedPaths, ref);\n};\n\nexport const createSegmentRoute = (path: string, completePath: string): SegmentRoute => {\n  const routePath = createRoutePathSegment(path, completePath);\n  return new SegmentRoute(routePath);\n};\n\nexport const createLocalizedSegmentRoute = (\n  pathDictionary: PathDictionaryType,\n  completePathDictionary: PathDictionaryType,\n): LocalizedSegmentRoute => {\n  const localizedPaths = createLocalizedPaths(pathDictionary, completePathDictionary, true);\n  return new LocalizedSegmentRoute(localizedPaths);\n};\n"]}