{"version":3,"sources":["../../src/router/findMatch.js"],"names":["logger","parseOtherParams","wildcard","split","findMatch","path","completePath","routes","locale","namedParams","result","some","route","routePath","getPath","match","regExp","exec","shift","groupCount","length","group","Map","forEach","paramName","set","isSegment","restOfThePath","nestedRoutes","defaultRoute","otherParams","undefined","Object","freeze","ref"],"mappings":";;;;;;;AAIA,IAAMA,cAAN;;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SAAuBA,WAAWA,SAASC,KAAT,CAAe,GAAf,CAAX,KAAvB;AAAA,CAAzB;;AAEA,IAAMC,YAAY,SAAZA,SAAY,CAChBC,IADgB,EAEhBC,YAFgB,EAGhBC,MAHgB,EAIhBC,MAJgB,EAKhBC,WALgB,EAMI;AACpB,MAAIC,SAAS,IAAb;;AAEAH,SAAOI,IAAP,CAAY,UAACC,KAAD,EAAsB;AAChC,QAAMC,YAAYD,MAAME,OAAN,CAAcN,MAAd,CAAlB;;AASA,QAAMO,QAAQF,UAAUG,MAAV,CAAiBC,IAAjB,CAAsBZ,IAAtB,CAAd;AACA,QAAI,CAACU,KAAL,EAAY,OAAO,KAAP;;AAEZA,UAAMG,KAAN,GAbgC,CAajB;;AAEf,QAAIC,aAAaJ,MAAMK,MAAvB;AACA,QAAIC,QAAQ,CAAZ;;AAEA,QAAIR,UAAUJ,WAAV,CAAsBW,MAAtB,KAAiC,CAArC,EAAwC;AACtC;AACA,UAAI,CAACX,WAAL,EAAkBA,cAAc,IAAIa,GAAJ,EAAd;;AAElBT,gBAAUJ,WAAV,CAAsBc,OAAtB,CAA8B,UAACC,SAAD,EAAuB;AACnDf,oBAAYgB,GAAZ,CAAgBD,SAAhB,EAA2BT,MAAMM,OAAN,CAA3B;AACD,OAFD;AAGD;;AAED,QAAIT,MAAMc,SAAN,EAAJ,EAAuB;AACrB,UAAMC,gBAAgBZ,MAAM,EAAEI,UAAR,CAAtB;;AAEA,UAAIQ,aAAJ,EAAmB;AACjBjB,iBAASN,gBACHuB,aADG,EAEPrB,YAFO,EAGPM,MAAMgB,YAHC,EAIPpB,MAJO,EAKPC,WALO,CAAT;;AAQA,eAAOC,WAAW,IAAlB;AACD;;AAED,UAAI,CAACE,MAAMiB,YAAX,EAAyB;AACvB,eAAO,KAAP;AACD;;AAEDjB,cAAQA,MAAMiB,YAAd;AACD;;AAED,QAAMC,cAAcT,QAAQ,CAAR,KAAcF,UAAd,GAA2BY,SAA3B,GAAuC9B,iBAAiBc,MAAMM,KAAN,CAAjB,CAA3D;;AAEAX,aAASsB,OAAOC,MAAP,CAAc;AACrBC,WAAKtB,MAAMsB,GADU;AAErB7B,YAAMC,YAFe;AAGrBM,kBAHqB;AAIrBC,0BAJqB;AAKrBJ,8BALqB;AAMrBqB;AANqB,KAAd,CAAT;;AASA,WAAO,IAAP;AACD,GA7DD;;AA+DA,SAAOpB,MAAP;AACD,CAzED;;kBA2Ee,UAACL,IAAD,EAAeE,MAAf;AAAA,MAAmCC,MAAnC,uEAAwD,IAAxD;AAAA,SACbJ,UAAUC,IAAV,EAAgBA,IAAhB,EAAsBE,MAAtB,EAA8BC,MAA9B,CADa;AAAA,C","file":"findMatch.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport type { RoutesType, LocaleType, RouteMatchType } from '../types';\nimport type { RouteType } from '../routes/index';\n\nconst logger = !PRODUCTION && new Logger('router-segments:findMatch');\n\nconst parseOtherParams = (wildcard: string) => (wildcard ? wildcard.split('/') : []);\n\nconst findMatch = (\n  path: string,\n  completePath: string,\n  routes: RoutesType,\n  locale: LocaleType,\n  namedParams: ?Map<string, string>,\n): ?RouteMatchType => {\n  let result = null;\n\n  routes.some((route: RouteType) => {\n    const routePath = route.getPath(locale);\n\n    if (!PRODUCTION && !routePath) {\n      throw new Error(`Unknown localized route for locale ${locale}`);\n    }\n\n    /* istanbul ignore next */\n    if (!PRODUCTION) logger.debug(`trying ${routePath.regExp}`);\n\n    const match = routePath.regExp.exec(path);\n    if (!match) return false;\n\n    match.shift(); // remove m[0], === path;\n\n    let groupCount = match.length;\n    let group = 0;\n\n    if (routePath.namedParams.length !== 0) {\n      // set params\n      if (!namedParams) namedParams = new Map();\n\n      routePath.namedParams.forEach((paramName: string) => {\n        namedParams.set(paramName, match[group++]);\n      });\n    }\n\n    if (route.isSegment()) {\n      const restOfThePath = match[--groupCount];\n\n      if (restOfThePath) {\n        result = findMatch(\n          `/${restOfThePath}`,\n          completePath,\n          route.nestedRoutes,\n          locale,\n          namedParams,\n        );\n\n        return result !== null;\n      }\n\n      if (!route.defaultRoute) {\n        return false;\n      }\n\n      route = route.defaultRoute;\n    }\n\n    const otherParams = group + 1 !== groupCount ? undefined : parseOtherParams(match[group]);\n\n    result = Object.freeze({\n      ref: route.ref,\n      path: completePath,\n      route,\n      routePath,\n      namedParams,\n      otherParams,\n    });\n\n    return true;\n  });\n\n  return result;\n};\n\nexport default (path: string, routes: RoutesType, locale: LocaleType = 'en'): ?RouteMatchType =>\n  findMatch(path, path, routes, locale);\n"]}