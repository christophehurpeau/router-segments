{"version":3,"sources":["../../src/routes/createRoutePath.js"],"names":["pathToRegExp","SegmentRoutePathType","RoutePathType","internalCreateRoutePath","path","completePath","segment","keys","regExp","sensitive","strict","namedParams","map","key","name","filter","Boolean","toPath","compile","createRoutePathSegment","createRoutePath"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAAcC,6CAAd,EAAoCC,+BAApC,QAAyD,UAAzD;;;;;;;;;AAEA,MAAMC,0BAA0B,SAA1BA,uBAA0B,CAC9BC,IAD8B,EAE9BC,YAF8B,EAG9BC,OAH8B,EAIW;AAAA,kBAHrC,UAGqC;;AAAA,0BAF7B,UAE6B;;AAAA,qBADlC,WACkC;;AAAA,+BAAxC,qCAAuB,oBAAvB,CAAwC;;AAAA;AAAA;AAAA;;AACzC,QAAMC,SAAN;AACA,QAAMC,SAASR,aAAaM,UAAW,GAAEF,IAAK,QAAlB,GAA4BA,IAAzC,EAA+CG,IAA/C,EAAqD;AAClEE,eAAW,IADuD;AAElEC,YAAQ;AAF0D,GAArD,CAAf;AAIA,QAAMC,cAAcJ,KAAKK,GAAL,CAAS;AAAA,WAAOC,IAAIC,IAAX;AAAA,GAAT,EAA0BC,MAA1B,CAAiCC,OAAjC,CAApB;;AAEA,MAAIV,OAAJ,EAAa,0BAAO,EAAEF,IAAF,EAAQC,YAAR,EAAsBG,MAAtB,EAA8BG,WAA9B,EAAP;;AAEb,4BAAO;AACLP,QADK;AAELC,gBAFK;AAGLG,UAHK;AAILG,eAJK;AAKLM,YAAQjB,aAAakB,OAAb,CAAqBb,YAArB;AALH,GAAP;AAOD,CArBD;;AAuBA,OAAO,MAAMc,yBAAyB,SAAzBA,sBAAyB,CAACf,IAAD,EAAeC,YAAf;AAAA,mBAAK,UAAL;;AAAA,2BAA2B,UAA3B;;AAAA,gCAAsC,oBAAtC;;AAAA;AAAA;AAAA,6BACpCF,wBAAwBC,IAAxB,EAA8BC,YAA9B,EAA4C,IAA5C,CADoC;AAAA,CAA/B;;AAGP,OAAO,MAAMe,kBAAkB,SAAlBA,eAAkB,CAAChB,IAAD,EAAeC,YAAf;AAAA,mBAAK,UAAL;;AAAA,2BAA2B,UAA3B;;AAAA,gCAAsC,oBAAtC;;AAAA;AAAA;AAAA,6BAC7BF,wBAAwBC,IAAxB,EAA8BC,YAA9B,EAA4C,KAA5C,CAD6B;AAAA,CAAxB","file":"createRoutePath.js","sourcesContent":["import pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePathType, RoutePathType } from '../types';\n\nconst internalCreateRoutePath = (\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePathType | RoutePathType => {\n  const keys = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map(key => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n};\n\nexport const createRoutePathSegment = (path: string, completePath: string): RoutePathType =>\n  internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (path: string, completePath: string): RoutePathType =>\n  internalCreateRoutePath(path, completePath, false);\n"]}