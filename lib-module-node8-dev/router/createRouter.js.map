{"version":3,"sources":["../../src/router/createRouter.js"],"names":["RoutesType","RouteMapType","RouterType","RouteMatchType","EndRouteType","findMatch","routes","routeMap","getRequiredRoute","routeKey","route","get","Error","key","find","path","locale","toPath","args","getPath","toLocalizedPath"],"mappings":"AAAA,SAAcA,yBAAd,EAA0BC,6BAA1B,EAAwCC,yBAAxC,EAAoDC,iCAApD,QAA0E,UAA1E;AACA,SAAcC,6BAAd,QAAkC,WAAlC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;;;;;;AAEA,0BAAe,CAACC,MAAD,EAAqBC,QAArB,KAA4D;AAAA,oBAArD,iBAAqD;;AAAA,sBAA/B,mBAA+B;;AAAA,+BAAd,iBAAc;;AAAA;AAAA;;AACzE,QAAMC,mBAAmBC,YAAY;AACnC,UAAMC,QAAQH,SAASI,GAAT,CAAaF,QAAb,CAAd;AACA,QAAI,CAACC,KAAL,EAAY,MAAM,IAAIE,KAAJ,CAAW,mBAAkBH,QAAS,GAAtC,CAAN;AACZ,WAAOC,KAAP;AACD,GAJD;;AAMA,4BAAO;AACLC,oBAAME,GAAD;AAAA,qBAAI,UAAJ;;AAAA,oCAAe,WAAC,mBAAD,CAAf;;AAAA;AAAA,iCAAgCL,iBAAiBK,GAAjB,CAAhC;AAAA,KAAL,EAAK,0BAAI,UAAJ,YAAa,WAAG,mBAAH,CAAb,EAAL,CADK;AAELC,qBAAM,CAACC,IAAD,EAAeC,MAAf;AAAA,sBAAK,UAAL;;AAAA,wBAAqB,WAAG,UAAH,CAArB;;AAAA,oCAAiC,WAAC,qBAAD,CAAjC;;AAAA;AAAA;AAAA,iCAAoDX,UAAUU,IAAV,EAAgBT,MAAhB,EAAwBU,MAAxB,CAApD;AAAA,KAAN,EAAM,2BAAK,UAAL,qBAAqB,WAAG,UAAH,CAArB,YAA+B,WAAG,qBAAH,CAA/B,EAAN,CAFK;AAGLC,uBAAQ,CAACJ,GAAD,EAAcK,IAAd;AAAA,sBAAI,UAAJ;;AAAA,sBAAkB,OAAlB;;AAAA;AAAA;AAAA,aAA4BV,iBAAiBK,GAAjB,EAAsBM,OAAtB,GAAgCF,MAAhC,CAAuCC,IAAvC,CAA5B;AAAA,KAAR,EAAQ,0BAAI,UAAJ,mBAAkB,OAAlB,EAAR,CAHK;AAILE,gCAAiB,CAACJ,MAAD,EAAiBH,GAAjB,EAA8BK,IAA9B;AAAA,yBAAO,UAAP;;AAAA,sBAAoB,UAApB;;AAAA,uBAAkC,OAAlC;;AAAA;AAAA;AAAA;AAAA,aACfV,iBAAiBK,GAAjB,EAAsBM,OAAtB,CAA8BH,MAA9B,EAAsCC,MAAtC,CAA6CC,IAA7C,CADe;AAAA,KAAjB,EAAiB,6BAAO,UAAP,kBAAoB,UAApB,mBAAkC,OAAlC,EAAjB;AAJK,GAAP;AAOD,CAdD,EAAe,6BAAO,iBAAP,uBAA6B,mBAA7B,YAA4C,iBAA5C,EAAf","file":"createRouter.js","sourcesContent":["import type { RoutesType, RouteMapType, RouterType, RouteMatchType } from '../types';\nimport type { EndRouteType } from '../routes';\nimport findMatch from './findMatch';\n\nexport default (routes: RoutesType, routeMap: RouteMapType): RouterType => {\n  const getRequiredRoute = routeKey => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: (key: string): ?EndRouteType => getRequiredRoute(key),\n    find: (path: string, locale: ?string): ?RouteMatchType => findMatch(path, routes, locale),\n    toPath: (key: string, args: any) => getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (locale: string, key: string, args: any) =>\n      getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n};\n"]}