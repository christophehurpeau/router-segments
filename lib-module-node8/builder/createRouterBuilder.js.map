{"version":3,"sources":["../../src/builder/createRouterBuilder.js"],"names":["createRoute","createLocalizedRoute","createSegmentRoute","createLocalizedSegmentRoute","createRouter","createSegmentRouterBuilderCreator","locales","defaultLocale","routes","routeMap","Map","addToRouteMap","key","route","has","Error","set","createSegmentRouterBuilder","add","path","ref","push","addLocalized","localizedPath","finalKey","addSegment","buildSegment","freeze","addLocalizedSegment","localizedPaths","getRoutes"],"mappings":";AAUA,SACEA,WADF,EAEEC,oBAFF,EAGEC,kBAHF,EAIEC,2BAJF,QAKO,kBALP;AAMA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,iCAAP,MAA8C,qCAA9C;;AAEA,gBAAgBC,OAAD,IAA8C;AAC3D,QAAMC,gBAAgBD,WAAWA,QAAQ,CAAR,CAAjC;AACA,QAAME,WAAN;AACA,QAAMC,WAAyB,IAAIC,GAAJ,EAA/B;;AAEA,QAAMC,gBAAgB,CAACC,GAAD,EAAcC,KAAd,KAAmC;AACvD,QAAIJ,SAASK,GAAT,CAAaF,GAAb,CAAJ,EAAuB,MAAM,IAAIG,KAAJ,CAAW,IAAGH,GAAI,mBAAlB,CAAN;AACvBH,aAASO,GAAT,CAAaJ,GAAb,EAAkBC,KAAlB;AACD,GAHD;;AAKA,QAAMI,6BAA6BZ,kCACjCE,aADiC,EAEjCI,aAFiC,CAAnC;;AAKA,SAAO;AACLO,SAAK,CAACC,IAAD,EAAeC,GAAf,EAAkCR,GAAlC,KAAyD;AAC5D,YAAMC,QAAQb,YAAYmB,IAAZ,EAAkBA,IAAlB,EAAwBC,GAAxB,CAAd;AACAZ,aAAOa,IAAP,CAAYR,KAAZ;AACA,UAAI,CAACD,GAAL,EAAUA,MAAMO,IAAN;AACVR,oBAAcC,GAAd,EAAmBC,KAAnB;AACD,KANI;;AAQLS,kBAAc,CAACC,aAAD,EAAoCH,GAApC,EAAuDR,GAAvD,KAA8E;AAC1F,UAAI,CAACL,aAAL,EAAoB,MAAM,IAAIQ,KAAJ,CAAU,iBAAV,CAAN;AACpB,YAAMF,QAAQZ,qBAAqBsB,aAArB,EAAoCA,aAApC,EAAmDH,GAAnD,CAAd;AACAZ,aAAOa,IAAP,CAAYR,KAAZ;AACA,YAAMW,WAAmBZ,OAAOW,cAAchB,aAAd,CAAhC;AACAI,oBAAca,QAAd,EAAwBX,KAAxB;AACD,KAdI;;AAgBLY,gBAAY,CAACN,IAAD,EAAeO,YAAf,KAA2D;AACrE,YAAMb,QAAQX,mBAAmBiB,IAAnB,EAAyBA,IAAzB,CAAd;AACAO,mBAAaT,2BAA2BJ,KAA3B,CAAb;AACAA,YAAMc,MAAN;AACAnB,aAAOa,IAAP,CAAYR,KAAZ;AACD,KArBI;;AAuBLe,yBAAqB,CACnBC,cADmB,EAEnBH,YAFmB,KAGV;AACT,UAAI,CAACnB,aAAL,EAAoB,MAAM,IAAIQ,KAAJ,CAAU,iBAAV,CAAN;AACpB,YAAMF,QAAQV,4BAA4B0B,cAA5B,EAA4CA,cAA5C,CAAd;AACAH,mBAAaT,2BAA2BJ,KAA3B,CAAb;AACAA,YAAMc,MAAN;AACAnB,aAAOa,IAAP,CAAYR,KAAZ;AACD,KAhCI;;AAkCLiB,eAAW,MAAMtB,MAlCZ;AAmCLJ,kBAAc,MAAMA,aAAaI,MAAb,EAAqBC,QAArB;AAnCf,GAAP;AAqCD,CApDD","file":"createRouterBuilder.js","sourcesContent":["import type {\n  LocalesType,\n  RouterBuilderType,\n  PathDictionaryType,\n  RoutesType,\n  RouteMapType,\n  RouteType,\n  SegmentCallbackType,\n  RouteRefType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter from '../router/createRouter';\nimport createSegmentRouterBuilderCreator from './createSegmentRouterBuilderCreator';\n\nexport default (locales: ?LocalesType): RouterBuilderType => {\n  const defaultLocale = locales && locales[0];\n  const routes: RoutesType = [];\n  const routeMap: RouteMapType = new Map();\n\n  const addToRouteMap = (key: string, route: RouteType) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRefType, key: ?string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (localizedPath: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPath, localizedPath, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPath[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (path: string, buildSegment: SegmentCallbackType): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: PathDictionaryType,\n      buildSegment: SegmentCallbackType,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n};\n"]}