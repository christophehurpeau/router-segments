{"version":3,"sources":["../../src/builder/createRouterBuilder.js"],"names":["locales","defaultLocale","Map","addToRouteMap","key","route","routeMap","has","Error","set","createSegmentRouterBuilder","add","path","ref","routes","push","addLocalized","localizedPath","finalKey","addSegment","buildSegment","freeze","addLocalizedSegment","localizedPaths","getRoutes","createRouter"],"mappings":";;;;;;AAAA;;AAUA;;AAMA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;kBAEe,6BAACA,OAAD,EAA8C;AAAA,qBAAtC,+BAAG,sCAAH,CAAsC;;AAAA,mDAArB,4CAAqB;;AAAA;;AAC3D,QAAMC,gBAAgBD,WAAWA,QAAQ,CAAR,CAAjC;AACA,iBAAY,qCAAZ;AACA,mBAAc,uCAAd,QAA+B,IAAIE,GAAJ,EAA/B;;AAEA,QAAMC,gBAAgB,CAACC,GAAD,EAAcC,KAAd,KAAmC;AAAA,mBAA/B,8BAA+B;;AAAA,qBAAhB,oCAAgB;;AAAA;;AAAA;;AACvD,QAAIC,SAASC,GAAT,CAAaH,GAAb,CAAJ,EAAuB,MAAM,IAAII,KAAJ,CAAW,IAAGJ,GAAI,mBAAlB,CAAN;AACvBE,aAASG,GAAT,CAAaL,GAAb,EAAkBC,KAAlB;AACD,GAHD;;AAKA,QAAMK,6BAA6B,iDACjCT,aADiC,EAEjCE,aAFiC,CAAnC;;AAKA,4BAAO;AACLQ,SAAK,CAACC,IAAD,EAAeC,GAAf,EAAkCT,GAAlC,KAAyD;AAAA,sBAApD,8BAAoD;;AAAA,qBAAvC,uCAAuC;;AAAA,sBAApB,+BAAG,8BAAH,CAAoB;;AAAA,mCAAR,4BAAQ;;AAAA;;AAAA;;AAAA;;AAC5D,YAAMC,QAAQ,yBAAYO,IAAZ,EAAkBA,IAAlB,EAAwBC,GAAxB,CAAd;AACAC,aAAOC,IAAP,CAAYV,KAAZ;AACA,UAAI,CAACD,GAAL,EAAUA,uBAAMQ,IAAN;AACVT,oBAAcC,GAAd,EAAmBC,KAAnB;AACD,KANI;;AAQLW,kBAAc,CAACC,aAAD,EAAoCJ,GAApC,EAAuDT,GAAvD,KAA8E;AAAA,+BAAhE,6CAAgE;;AAAA,sBAAvC,uCAAuC;;AAAA,sBAApB,+BAAG,8BAAH,CAAoB;;AAAA,mCAAR,4BAAQ;;AAAA;;AAAA;;AAAA;;AAC1F,UAAI,CAACH,aAAL,EAAoB,MAAM,IAAIO,KAAJ,CAAU,iBAAV,CAAN;AACpB,YAAMH,QAAQ,kCAAqBY,aAArB,EAAoCA,aAApC,EAAmDJ,GAAnD,CAAd;AACAC,aAAOC,IAAP,CAAYV,KAAZ;AACA,uBAAc,8BAAd,QAAyBD,OAAOa,cAAchB,aAAd,CAAhC;AACAE,oBAAce,QAAd,EAAwBb,KAAxB;AACD,KAdI;;AAgBLc,gBAAY,CAACP,IAAD,EAAeQ,YAAf,KAA2D;AAAA,uBAAtD,8BAAsD;;AAAA,8BAAhC,8CAAgC;;AAAA,mCAAR,4BAAQ;;AAAA;;AAAA;;AACrE,YAAMf,QAAQ,gCAAmBO,IAAnB,EAAyBA,IAAzB,CAAd;AACAQ,mBAAaV,2BAA2BL,KAA3B,CAAb;AACAA,YAAMgB,MAAN;AACAP,aAAOC,IAAP,CAAYV,KAAZ;AACD,KArBI;;AAuBLiB,yBAAqB,CACnBC,cADmB,EAEnBH,YAFmB,KAGV;AAAA,gCAFK,6CAEL;;AAAA,+BADG,8CACH;;AAAA,mCAAR,4BAAQ;;AAAA;;AAAA;;AACT,UAAI,CAACnB,aAAL,EAAoB,MAAM,IAAIO,KAAJ,CAAU,iBAAV,CAAN;AACpB,YAAMH,QAAQ,yCAA4BkB,cAA5B,EAA4CA,cAA5C,CAAd;AACAH,mBAAaV,2BAA2BL,KAA3B,CAAb;AACAA,YAAMgB,MAAN;AACAP,aAAOC,IAAP,CAAYV,KAAZ;AACD,KAhCI;;AAkCLmB,eAAW,MAAMV,MAlCZ;AAmCLW,kBAAc,MAAM,4BAAaX,MAAb,EAAqBR,QAArB;AAnCf,GAAP;AAqCD,C","file":"createRouterBuilder.js","sourcesContent":["import type {\n  LocalesType,\n  RouterBuilderType,\n  PathDictionaryType,\n  RoutesType,\n  RouteMapType,\n  RouteType,\n  SegmentCallbackType,\n  RouteRefType,\n} from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\nimport createRouter from '../router/createRouter';\nimport createSegmentRouterBuilderCreator from './createSegmentRouterBuilderCreator';\n\nexport default (locales: ?LocalesType): RouterBuilderType => {\n  const defaultLocale = locales && locales[0];\n  const routes: RoutesType = [];\n  const routeMap: RouteMapType = new Map();\n\n  const addToRouteMap = (key: string, route: RouteType) => {\n    if (routeMap.has(key)) throw new Error(`\"${key}\" is already used`);\n    routeMap.set(key, route);\n  };\n\n  const createSegmentRouterBuilder = createSegmentRouterBuilderCreator(\n    defaultLocale,\n    addToRouteMap,\n  );\n\n  return {\n    add: (path: string, ref: RouteRefType, key: ?string): void => {\n      const route = createRoute(path, path, ref);\n      routes.push(route);\n      if (!key) key = path;\n      addToRouteMap(key, route);\n    },\n\n    addLocalized: (localizedPath: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedRoute(localizedPath, localizedPath, ref);\n      routes.push(route);\n      const finalKey: string = key || localizedPath[defaultLocale];\n      addToRouteMap(finalKey, route);\n    },\n\n    addSegment: (path: string, buildSegment: SegmentCallbackType): void => {\n      const route = createSegmentRoute(path, path);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    addLocalizedSegment: (\n      localizedPaths: PathDictionaryType,\n      buildSegment: SegmentCallbackType,\n    ): void => {\n      if (!defaultLocale) throw new Error('Invalid locales');\n      const route = createLocalizedSegmentRoute(localizedPaths, localizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      routes.push(route);\n    },\n\n    getRoutes: () => routes,\n    createRouter: () => createRouter(routes, routeMap),\n  };\n};\n"]}