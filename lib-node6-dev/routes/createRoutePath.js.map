{"version":3,"sources":["../../src/routes/createRoutePath.js"],"names":["internalCreateRoutePath","path","completePath","segment","keys","regExp","sensitive","strict","namedParams","map","key","name","filter","Boolean","toPath","compile","createRoutePathSegment","createRoutePath"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,MAAMA,0BAA0B,CAC9BC,IAD8B,EAE9BC,YAF8B,EAG9BC,OAH8B,KAIW;AAAA,kBAHrC,8BAGqC;;AAAA,0BAF7B,8BAE6B;;AAAA,qBADlC,+BACkC;;AAAA,mDAAxC,6EAAuB,wCAAvB,CAAwC;;AAAA;;AAAA;;AAAA;;AACzC,QAAMC,SAAN;AACA,QAAMC,SAAS,4BAAaF,UAAW,GAAEF,IAAK,QAAlB,GAA4BA,IAAzC,EAA+CG,IAA/C,EAAqD;AAClEE,eAAW,IADuD;AAElEC,YAAQ;AAF0D,GAArD,CAAf;AAIA,QAAMC,cAAcJ,KAAKK,GAAL,CAASC,OAAOA,IAAIC,IAApB,EAA0BC,MAA1B,CAAiCC,OAAjC,CAApB;;AAEA,MAAIV,OAAJ,EAAa,0BAAO,EAAEF,IAAF,EAAQC,YAAR,EAAsBG,MAAtB,EAA8BG,WAA9B,EAAP;;AAEb,4BAAO;AACLP,QADK;AAELC,gBAFK;AAGLG,UAHK;AAILG,eAJK;AAKLM,YAAQ,uBAAaC,OAAb,CAAqBb,YAArB;AALH,GAAP;AAOD,CArBD;;AAuBO,MAAMc,0DAAyB,CAACf,IAAD,EAAeC,YAAf;AAAA,mBAAK,8BAAL;;AAAA,2BAA2B,8BAA3B;;AAAA,oDAAsC,wCAAtC;;AAAA;;AAAA;;AAAA,6BACpCF,wBAAwBC,IAAxB,EAA8BC,YAA9B,EAA4C,IAA5C,CADoC;AAAA,CAA/B;;AAGA,MAAMe,4CAAkB,CAAChB,IAAD,EAAeC,YAAf;AAAA,mBAAK,8BAAL;;AAAA,2BAA2B,8BAA3B;;AAAA,oDAAsC,wCAAtC;;AAAA;;AAAA;;AAAA,6BAC7BF,wBAAwBC,IAAxB,EAA8BC,YAA9B,EAA4C,KAA5C,CAD6B;AAAA,CAAxB","file":"createRoutePath.js","sourcesContent":["import pathToRegExp from 'path-to-regexp';\nimport type { SegmentRoutePathType, RoutePathType } from '../types';\n\nconst internalCreateRoutePath = (\n  path: string,\n  completePath: string,\n  segment: boolean,\n): SegmentRoutePathType | RoutePathType => {\n  const keys = [];\n  const regExp = pathToRegExp(segment ? `${path}/(.+)?` : path, keys, {\n    sensitive: true,\n    strict: true,\n  });\n  const namedParams = keys.map(key => key.name).filter(Boolean);\n\n  if (segment) return { path, completePath, regExp, namedParams };\n\n  return {\n    path,\n    completePath,\n    regExp,\n    namedParams,\n    toPath: pathToRegExp.compile(completePath),\n  };\n};\n\nexport const createRoutePathSegment = (path: string, completePath: string): RoutePathType =>\n  internalCreateRoutePath(path, completePath, true);\n\nexport const createRoutePath = (path: string, completePath: string): RoutePathType =>\n  internalCreateRoutePath(path, completePath, false);\n"]}