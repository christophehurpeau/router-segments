{"version":3,"sources":["../../src/builder/createSegmentRouterBuilderCreator.js"],"names":["defaultLocale","addToRouteMap","createSegmentRouterBuilder","segmentRoute","getCompletePath","path","completePath","getCompleteLocalizedPaths","localizedPaths","completeLocalizedPaths","getCompletePathForLocale","locale","get","Object","keys","forEach","createLocalizedPathFromSegment","Array","from","_createLocalizedEndRoute","ref","key","route","finalKey","_createEndRoute","_createLocalizedSegmentRoute","buildSegment","freeze","_createSegmentRoute","defaultRoute","add","nestedRoutes","push","addLocalized","Error","addSegment","addLocalizedSegment"],"mappings":"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","file":"createSegmentRouterBuilderCreator.js","sourcesContent":["import type { SegmentRouteType } from '../routes/index';\nimport type { RouteType, PathDictionaryType, SegmentCallbackType, RouteRefType } from '../types';\nimport {\n  createRoute,\n  createLocalizedRoute,\n  createSegmentRoute,\n  createLocalizedSegmentRoute,\n} from '../routes/create';\n\ntype AddToRouteMapType = (key: string, route: RouteType) => void;\nexport default (defaultLocale: ?string, addToRouteMap: AddToRouteMapType) => {\n  const createSegmentRouterBuilder = (segmentRoute: SegmentRouteType) => {\n    const getCompletePath = path => segmentRoute.path.completePath + path;\n    const getCompleteLocalizedPaths = (localizedPaths: PathDictionaryType): PathDictionaryType => {\n      const completeLocalizedPaths = {};\n\n      const getCompletePathForLocale = !segmentRoute.localizedPaths\n        ? (path, locale) => `${segmentRoute.path.completePath}${path}`\n        : (path, locale) => `${segmentRoute.localizedPaths.get(locale).completePath}${path}`;\n\n      Object.keys(localizedPaths).forEach((locale: string) => {\n        completeLocalizedPaths[locale] = getCompletePathForLocale(localizedPaths[locale], locale);\n      });\n\n      return completeLocalizedPaths;\n    };\n\n    const createLocalizedPathFromSegment = (path: string) => {\n      const localizedPaths = {};\n      Array.from(segmentRoute.localizedPaths.keys()).forEach(\n        locale => (localizedPaths[locale] = path),\n      );\n      return localizedPaths;\n    };\n\n    const _createLocalizedEndRoute = (\n      localizedPaths: PathDictionaryType,\n      ref: RouteRefType,\n      key: ?string,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const finalKey: string = key || completeLocalizedPaths[defaultLocale];\n      const route = createLocalizedRoute(localizedPaths, completeLocalizedPaths, ref);\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createEndRoute = (path: string, ref: RouteRefType, key: ?string) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedEndRoute(createLocalizedPathFromSegment(path), ref, key);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createRoute(path, completePath, ref);\n      const finalKey: string = key || completePath;\n      addToRouteMap(finalKey, route);\n      return route;\n    };\n\n    const _createLocalizedSegmentRoute = (\n      localizedPaths: PathDictionaryType,\n      buildSegment: SegmentCallbackType,\n    ) => {\n      const completeLocalizedPaths = getCompleteLocalizedPaths(localizedPaths);\n      const route = createLocalizedSegmentRoute(localizedPaths, completeLocalizedPaths);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    const _createSegmentRoute = (path: string, buildSegment: SegmentCallbackType) => {\n      if (segmentRoute.localizedPaths) {\n        return _createLocalizedSegmentRoute(createLocalizedPathFromSegment(path), buildSegment);\n      }\n\n      const completePath = getCompletePath(path);\n      const route = createSegmentRoute(path, completePath);\n      buildSegment(createSegmentRouterBuilder(route));\n      route.freeze();\n      return route;\n    };\n\n    return {\n      defaultRoute: (ref: RouteRefType, key: ?string) => {\n        segmentRoute.defaultRoute = _createEndRoute('', ref, key);\n      },\n\n      add: (path: string, ref: RouteRefType, key: ?string): void => {\n        segmentRoute.nestedRoutes.push(_createEndRoute(path, ref, key));\n      },\n\n      addLocalized: (localizedPaths: PathDictionaryType, ref: RouteRefType, key: ?string): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedEndRoute(localizedPaths, ref, key));\n      },\n\n      addSegment: (path: string, buildSegment: SegmentCallbackType): void => {\n        segmentRoute.nestedRoutes.push(_createSegmentRoute(path, buildSegment));\n      },\n\n      addLocalizedSegment: (\n        localizedPaths: PathDictionaryType,\n        buildSegment: SegmentCallbackType,\n      ): void => {\n        if (!defaultLocale) throw new Error('Invalid locales');\n        segmentRoute.nestedRoutes.push(_createLocalizedSegmentRoute(localizedPaths, buildSegment));\n      },\n    };\n  };\n  return createSegmentRouterBuilder;\n};\n"]}