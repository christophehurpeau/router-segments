{"version":3,"sources":["../../src/router/createRouter.js"],"names":["routes","routeMap","getRequiredRoute","routeKey","route","get","Error","key","find","path","locale","toPath","args","getPath","toLocalizedPath"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;iDAEe,CAACA,MAAD,EAAqBC,QAArB,KAA4D;AAAA,oBAArD,qCAAqD;;AAAA,sBAA/B,uCAA+B;;AAAA,mDAAd,qCAAc;;AAAA;;AAAA;;AACzE,QAAMC,mBAAmBC,YAAY;AACnC,UAAMC,QAAQH,SAASI,GAAT,CAAaF,QAAb,CAAd;AACA,QAAI,CAACC,KAAL,EAAY,MAAM,IAAIE,KAAJ,CAAW,mBAAkBH,QAAS,GAAtC,CAAN;AACZ,WAAOC,KAAP;AACD,GAJD;;AAMA,4BAAO;AACLC,wCAAME,GAAD;AAAA,qBAAI,8BAAJ;;AAAA,wDAAe,+BAAC,uCAAD,CAAf;;AAAA;;AAAA,iCAAgCL,iBAAiBK,GAAjB,CAAhC;AAAA,KAAL,EAAK,kEAAI,8BAAJ,gCAAa,+BAAG,uCAAH,CAAb,EAAL,CADK;AAELC,yCAAM,CAACC,IAAD,EAAeC,MAAf;AAAA,sBAAK,8BAAL;;AAAA,wBAAqB,+BAAG,8BAAH,CAArB;;AAAA,wDAAiC,+BAAC,yCAAD,CAAjC;;AAAA;;AAAA;;AAAA,iCAAoD,yBAAUD,IAAV,EAAgBT,MAAhB,EAAwBU,MAAxB,CAApD;AAAA,KAAN,EAAM,mEAAK,8BAAL,yCAAqB,+BAAG,8BAAH,CAArB,gCAA+B,+BAAG,yCAAH,CAA/B,EAAN,CAFK;AAGLC,2CAAQ,CAACJ,GAAD,EAAcK,IAAd;AAAA,sBAAI,8BAAJ;;AAAA,sBAAkB,2BAAlB;;AAAA;;AAAA;;AAAA,aAA4BV,iBAAiBK,GAAjB,EAAsBM,OAAtB,GAAgCF,MAAhC,CAAuCC,IAAvC,CAA5B;AAAA,KAAR,EAAQ,kEAAI,8BAAJ,uCAAkB,2BAAlB,EAAR,CAHK;AAILE,oDAAiB,CAACJ,MAAD,EAAiBH,GAAjB,EAA8BK,IAA9B;AAAA,yBAAO,8BAAP;;AAAA,sBAAoB,8BAApB;;AAAA,uBAAkC,2BAAlC;;AAAA;;AAAA;;AAAA;;AAAA,aACfV,iBAAiBK,GAAjB,EAAsBM,OAAtB,CAA8BH,MAA9B,EAAsCC,MAAtC,CAA6CC,IAA7C,CADe;AAAA,KAAjB,EAAiB,qEAAO,8BAAP,sCAAoB,8BAApB,uCAAkC,2BAAlC,EAAjB;AAJK,GAAP;AAOD,C,EAdc,qEAAO,qCAAP,2CAA6B,uCAA7B,gCAA4C,qCAA5C,E","file":"createRouter.js","sourcesContent":["import type { RoutesType, RouteMapType, RouterType, RouteMatchType } from '../types';\nimport type { EndRouteType } from '../routes';\nimport findMatch from './findMatch';\n\nexport default (routes: RoutesType, routeMap: RouteMapType): RouterType => {\n  const getRequiredRoute = routeKey => {\n    const route = routeMap.get(routeKey);\n    if (!route) throw new Error(`No route named \"${routeKey}\"`);\n    return route;\n  };\n\n  return {\n    get: (key: string): ?EndRouteType => getRequiredRoute(key),\n    find: (path: string, locale: ?string): ?RouteMatchType => findMatch(path, routes, locale),\n    toPath: (key: string, args: any) => getRequiredRoute(key).getPath().toPath(args),\n    toLocalizedPath: (locale: string, key: string, args: any) =>\n      getRequiredRoute(key).getPath(locale).toPath(args),\n  };\n};\n"]}